<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>zabbix报警</title>
      <link href="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/"/>
      <url>/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>报警简单流程：报警源（产生报警事件）–&gt;报警媒介（报警渠道）–&gt;触发动作（发送告警规则） –&gt;接收方（接收告警）</p><p>zabbix报警源来自于触发器，zabbix模板中默认配置有多个触发器，是根据监控数据进行计算后产生的报警事件。</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221021171053217.png"></p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221021171305757.png"></p><p>可以对模板的触发器进行新增或删除然后应用到相应的主机来决定需要针对哪些事件进行报警。模板通常是应用于多个主机的，如果需要对单个主机新增报警事件，可以点击<code>配置</code>–&gt;<code>主机</code>–&gt;<code>触发器</code>来进行新增或删除，这里我们不过多介绍。</p><h1 id="企业微信报警"><a href="#企业微信报警" class="headerlink" title="企业微信报警"></a>企业微信报警</h1><h2 id="报警媒介"><a href="#报警媒介" class="headerlink" title="报警媒介"></a>报警媒介</h2><p><code>管理</code>–&gt;<code>报警媒介类型</code>–&gt;<code>创建媒体类型</code></p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221021174958833.png"></p><p>这里我们创建了一个名称为<code>企业微信</code>的报警媒介，具体信息如下：</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221021175106521.png"></p><ul><li><p>类型：我们选择脚本</p></li><li><p>脚本名称：1.py</p><pre class="line-numbers language-none"><code class="language-none">$ grep AlertScriptsPath /etc/zabbix/zabbix_server.conf### Option: AlertScriptsPath# AlertScriptsPath=/usr/lib/zabbix/alertscripts$ ll /usr/lib/zabbix/alertscripts-rwxr-xr-x 1 zabbix zabbix 1454 Sep 23 22:13 1.py*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报警脚本默认存放目录为<code>/usr/lib/zabbix/alertscripts</code>，而zabbix server配置文件中默认是以zabbix用户启动运行的，所以需要对该目录及其下文件授予zabbix用户权限<code>chown zabbix:zabbix /usr/lib/zabbix -R</code></p><pre class="line-numbers language-none"><code class="language-none">$ cat /usr/lib/zabbix/alertscripts/1.py#!/usr/bin/env python3#coding:utf8import argparseimport requestsparse = argparse.ArgumentParser()parse.add_argument("-u", "--user", help='Specify alerter via {ALERT.SENDTO}.')parse.add_argument("-s", "--subject", help='Specify alert subject via {ALERT.SUBJECT}')parse.add_argument("-m", "--message", help='Specify alert message via {ALERT.MESSAGE}')arg = parse.parse_args()  # 解析参数，并将值赋予变量arg：Namespace(echo='2131') &lt;class 'argparse.Namespace'&gt;zabbix_webhook = '填写自己的企业微信群机器人webhook'# mentioned_list此处不生效data = {    "msgtype": "markdown",    "markdown": {        "content": arg.message + "\n" + "&lt;@LongWeiChao&gt;",        "mentioned_list": [f"{arg.user}"],    }}requests.post(url=zabbix_webhook, headers={'Content-Type': 'application/json'}, json=data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>脚本参数：传递了三个参数</p><ul><li><code>{ALERT.SENDTO}</code>：传递报警发送人</li><li><code> {ALERT.SUBJECT}</code>：传递报警主题</li><li><code>{ALERT.MESSAGE}</code>：传递报警消息，其内容由<code>Message templates</code>中定义的内容决定</li></ul></li><li><p>描述：用于简单介绍该报警媒介</p></li></ul><p>配置<code>Message templates</code>：</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025105207521.png"></p><p>添加两个模板，分别为报警模板和恢复模板：</p><p>报警模板：</p><ul><li><p>Message type：问题</p></li><li><p>主题：告警名称: {EVENT.NAME}</p></li><li><p>消息</p><pre class="line-numbers language-none"><code class="language-none">&lt;font color="warning"&gt;zabbix告警通知&lt;/font&gt;        &gt;告警名称：{EVENT.NAME}        &gt;故障主机：{HOST.NAME}        &gt;告警时间：{EVENT.DATE} {EVENT.TIME}        &gt;持续时间：{EVENT.DURATION}        &gt;告警级别：{EVENT.SEVERITY}        &gt;事件ID：{EVENT.ID}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>恢复模板：</p><ul><li><p>Message type：Problem recovery</p></li><li><p>主题：Resolved in {EVENT.DURATION}: {EVENT.NAME}</p></li><li><p>消息</p><pre class="line-numbers language-none"><code class="language-none">&lt;font color="info"&gt;zabbix告警恢复通知&lt;/font&gt;         &gt;告警名称：{EVENT.NAME}        &gt;故障主机：{HOST.NAME}        &gt;告警时间：{EVENT.DATE} {EVENT.TIME}        &gt;持续时间：{EVENT.DURATION}        &gt;告警级别：{EVENT.SEVERITY}        &gt;事件ID：{EVENT.ID}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>主题对应脚本参数中的{ALERT.SUBJECT}，消息对应脚本参数中的 {ALERT.MESSAGE}，后面为用户配置报警媒介时的收件人对应脚本参数中的{ALERT.SENDTO}，这些都是zabbix中的固定变量。</p></blockquote><p>可通过官方文档查看<a href="https://www.zabbix.com/documentation/6.0/zh/manual/appendix/macros/supported_by_location">zabbix支持的变量</a>来更好的书写报警模板信息。</p><h2 id="触发动作"><a href="#触发动作" class="headerlink" title="触发动作"></a>触发动作</h2><p>定义报警规则，如指定<code>报警源</code>产生的哪些<code>报警事件</code>需要进行报警，通过哪些<code>报警媒介</code>发送报警，以及发送给哪些<code>用户</code>等。</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025115253794.png"></p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025115319947.png"></p><ul><li>名称：报警触发动作名称</li><li>条件：用于匹配哪些报警事件可以触发报警，这里匹配了gupt主机群组所有服务器产生的所有报警事件</li></ul><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025115329992.png"></p><ul><li>默认操作步骤持续时间： 默认情况下，一个操作步骤的持续时间为（60秒到1周），例如，长达一小时的步骤持续时间意味着，如果进行了该操作，一个小时后才会执行下个步骤。（60s、1m、2h、1d）</li><li>操作：按步骤执行，指定发送消息至用户群组或某一用户，添加操作的时候会有<code>Custom message</code>自定义，作用等同于报警媒介中的<code>Message templates</code>的消息，但是优先级低于报警媒介中的设定。</li><li>恢复操作：当操作结束后，是否发送消息。</li><li>更新操作：当操作变更后，是否发送消息</li></ul><h2 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h2><p>有个报警媒介之后，我们便可以通过<code>管理</code>–&gt;<code>用户</code>–&gt;<code>报警媒介</code>或者<code>User settings</code>–&gt;<code>Profile</code>–&gt;<code>报警媒介</code>来为需要接收报警的用户添加报警媒介。</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025103207081.png"></p><ul><li>类型：选择已经创建好的<code>企业微信</code>报警媒介</li><li>接收方：为企业微信群自己的名称，一般为姓名拼音（如：ZhangSan）或者手机号码，对应报警媒介<code>{ALERT.SENDTO}</code>参数，用于@相关人员。</li><li>报警时间：可以发送报警的时间区域</li><li>如果存在严重性则使用：哪些级别的报警需要发送。</li></ul><p>同时，我们可以为zabbix配置web页面告警提示：</p><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025155924394.png"></p><h1 id="报警效果展示"><a href="#报警效果展示" class="headerlink" title="报警效果展示"></a>报警效果展示</h1><h2 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h2><p><img src="/2022/10/21/zabbix/zabbix6.0%E6%8A%A5%E8%AD%A6/image-20221025113941717.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://developer.work.weixin.qq.com/document/path/91770#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA">https://developer.work.weixin.qq.com/document/path/91770#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA</a></li><li><a href="https://www.zabbix.com/documentation/6.0/zh/manual/appendix/macros/supported_by_location">https://www.zabbix.com/documentation/6.0/zh/manual/appendix/macros/supported_by_location</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix6.0 Discovery</title>
      <link href="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/"/>
      <url>/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>我们知道zabbix数据采集有主动模式和被动模式之分（以zabbix agent角度来区分）。</p><ul><li>被动模式：zabbix agent暴露端口，等待zabbix server连接并采集数据。</li><li>主动模式：zabbix agent主动连接zabbix server，并上报自己所采集的节点数据。</li></ul><p>默认zabbix工作于被动模式之下。</p><p>而zabbix中<code>discovery</code>的概念也大体如此，分为网络发现和自动注册，主要用于zabbix server如何<code>批量</code>与zabbix agent建立连接。</p><ul><li>网络发现：一般用于zabbix server可以访问zabbix agent暴露的端口，批量添加zabbix agent。（被动模式）</li><li>自动注册：一般用于zabbix agent可以访问zabbix server，而zabbix server无法访问zabbix agent的网络环境中，批量添加zabbix agent。（主动模式）</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="网络发现"><a href="#网络发现" class="headerlink" title="网络发现"></a>网络发现</h2><h3 id="1、配置zabbix-agent"><a href="#1、配置zabbix-agent" class="headerlink" title="1、配置zabbix agent"></a>1、配置zabbix agent</h3><p>zabbix agent配置被动模式，即配置文件<code>/etc/zabbix/zabbix_agent2.conf</code>中指定参数<code>Server=192.168.168.226</code>，该参数的含义为：启用被动模式，仅当zabbix server的地址为192.168.168.226时，server发送的连接请求才会被agent接受。</p><p>在这里我们安装了三个zabbix agent：192.168.168.194（linux）、192.168.168.42（linux）、192.168.168.211（Windows）</p><h3 id="2、配置自动发现规则："><a href="#2、配置自动发现规则：" class="headerlink" title="2、配置自动发现规则："></a>2、配置自动发现规则：</h3><p><code>配置</code>–&gt;<code>自动发现</code></p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020185545142.png"></p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020185614587.png"></p><ul><li>名称：自动发现规则名称</li><li>由agent代理程序自动发现：这里选择<code>没有agent代理程序</code>，否则需要配置zabbix proxy，收集由zabbix proxy发现的主机</li><li>IP范围：用于指定自动发现的IP段，可指定单个IP，也可指定范围如：192.168.168.1-254</li><li>更新间隔：定义了zabbix server执行该自动发现规则的频率</li><li>检查：Zabbix 将使用此检查列表进行发现，这里我们需要发现的客户端类型是zabbix agent那么便填写zabbix客户端。添加键值system.uname，后面会有用。</li><li>设备唯一性：这里以IP作为设备唯一性。</li><li>主机名称：选择IP地址，根据此设置主机名称</li><li>可见的名称：依旧选择IP地址</li><li>已启用：需启用，才可正常工作。</li></ul><h3 id="3、配置网络发现动作："><a href="#3、配置网络发现动作：" class="headerlink" title="3、配置网络发现动作："></a>3、配置网络发现动作：</h3><p><code>配置</code>–&gt;<code>动作</code>–&gt;<code>Discovery actions</code></p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020180739108.png"></p><p><code>发现动作</code>里面配置的是<code>自动发现规则</code>发现主机后的动作（主机匹配条件）和操作（要触发的动作）</p><p>这里我们添加了两种发现动作：用于分别发现linux和windows主机并进行不同的操作。</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021090909065.png"></p><p>以下是<code>Auto discovery. Linux servers.</code>的具体配置解释（windows的类似，只是条件和操作不同而已，见上图）：</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020182639928.png"></p><ul><li><p>名称：一个便于识别的标识名称</p></li><li><p>计算方式：用于控制条件之间的关系：与、或、和</p></li><li><p>条件：用于根据这些条件来配置自动发现规则中所发现的所有主机中需要批量添加的主机，点击<code>添加</code>按钮进行新增。</p><pre class="line-numbers language-none"><code class="language-none">键（类型）：接收到的值包含Linux（system.uname传过来的值包含Linux字符）、自动发现状态等于上（zabbix agent服务器是up状态）、服务类型等于zabbix客户端，等多种类型。匹配（操作者）：等于、不等于、包含、大于等（根据键的类型而定）。值：键需要匹配的规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>system.uname的值在linux中为<code>uname -a</code>的值，在windows中为<code>systeminfo</code>中<code>Windows 主机名 OS版本 OS名称 等</code>组成  。</p><p>可通过<code>zabbix_get -s 192.168.168.211 -p 10050 -k system.uname</code>进行查看。</p></blockquote></li><li><p>已启动：需启用，才可正常工作。</p></li></ul><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020184359439.png"></p><p>当满足动作后，便可在操作中添加细节，这里我们选择的是添加主机到<code>Linux servers</code>组，并且使用<code>Linux by Zabbix agent</code>模板进行监控。（默认添加主机还会自动添加到<code>Discovered hosts</code>主机群组）</p><blockquote><p>里面有很多可以操作的细节，不仅仅是配合自动发现规则添加主机，还可以进行其它批量自动操作。</p></blockquote><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221020184533888.png"></p><h3 id="4、查看"><a href="#4、查看" class="headerlink" title="4、查看"></a>4、查看</h3><p>当依次配置了<code>自动发现规则</code>和<code>网络发现动作</code>后，便可通过<code>监测</code>–&gt;<code>自动发现</code>中的<code>已监测主机</code>列查看是否完成了网络发现。</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021093741043.png"></p><p>或者通过查看日志<code>tail -f /var/log/zabbix/zabbix_server.log</code>有如下日志<code>1200808:20221021:090902.406 enabling Zabbix agent checks on host "192.168.168.211": interface became available</code>。</p><h2 id="自动注册"><a href="#自动注册" class="headerlink" title="自动注册"></a>自动注册</h2><p>zabbix agent主动与zabbix server建立连接，并上报数据。</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021112156056.png" alt="image-20221021112156056"></p><p>我们本地vmware运行着两个虚拟机安装zabbix agent，zabbix server安装在公有云的虚拟机上。满足agent可以访问server，server不能访问agent的单向网络环境。</p><p><strong>自动注册流程如下</strong>：</p><ol><li>agent向server主动发起连接，建立请求。</li><li>server配置<code>条件</code>用于匹配哪些主机允许连接，一般可以通过主机名称来进行匹配，即agent配置的Hostname。</li><li>条件符合后，server便向agent响应配置数据，之后每隔一段时间发送一次。</li><li>server端会根据操作细节进行添加主机，并接受agent端上报的主机信息。</li></ol><h3 id="1、配置zabbix-agent-1"><a href="#1、配置zabbix-agent-1" class="headerlink" title="1、配置zabbix agent"></a>1、配置zabbix agent</h3><pre class="line-numbers language-none"><code class="language-none"># agent1$ cat /etc/zabbix/zabbix-agent2.serviceServerActive=42.193.139.174Hostname=192.168.71.200# agent2$ cat /etc/zabbix/zabbix-agent2.serviceServerActive=42.193.139.174Hostname=192.168.71.132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ServerActive：开启agent的主动模式，后面跟zabbix server或zabbix proxy的地址，用来主动发起请求建立连接，并上报数据。</li><li>Hostname：这个参数非常重要，一般不填的话，默认是主机hostname。但是不建议这么做，因为其同时也是zabbix server中主机的主机名称（唯一）。而当agent处于主动模式时，其是主动注册匹配条件主机名称的值。</li></ul><h3 id="2、创建自动注册"><a href="#2、创建自动注册" class="headerlink" title="2、创建自动注册"></a>2、创建自动注册</h3><p>因为是自动注册，所以相比网络发现，就不需要配置自动发现规则了，agent会自动尝试连接server。</p><p><code>配置</code>–&gt;<code>动作</code>–&gt;<code>Autoregistration actions</code>–&gt;<code>创建动作</code></p><p>这里我们已经创建好了一个名称为<code>主动发现</code>的自动注册操作。</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021152440723.png"></p><p>创建自动注册操作主要包含两方面配置：</p><ul><li>条件：根据主机名称进行匹配，匹配Hostname中包含192的主机。</li><li>操作：添加到主机，添加到主机群组，链接到模板</li></ul><h3 id="3、查看"><a href="#3、查看" class="headerlink" title="3、查看"></a>3、查看</h3><p><code>配置</code>–&gt;<code>主机</code></p><p>点击主机可以查看到已经批量添加到了两个agent，其接口地址为vmware所在网络环境的出口公网IP。</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021152853872.png"></p><p>或者查看server端的日志：</p><p><img src="/2022/10/20/zabbix/zabbix6.0%E5%8F%91%E7%8E%B0/image-20221021153258717.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.zabbix.com/documentation/6.0/en/manual/discovery">https://www.zabbix.com/documentation/6.0/en/manual/discovery</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvm实践</title>
      <link href="/2022/09/01/linux/%E7%A3%81%E7%9B%98/lvm%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/09/01/linux/%E7%A3%81%E7%9B%98/lvm%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>lvm（Logical Volume Manager ）称为逻辑卷管理器，主要用来解决传统磁盘分区方式（先对磁盘进行分区，对分区进行文件系统格式化，将文件系统进行挂载使用）扩缩容不够灵活从而导致后期可能出现的磁盘空间不足等其它问题。</p><p>如：在项目初期磁盘空间使用规划中，低估了业务的数据增长量，同时采用传统磁盘分区管理方式进行存储业务数据，导致后期磁盘分区空间不足。这时如果想要扩展磁盘空间，只能新增硬盘，创建分区、文件系统，然后将之前磁盘分区文件系统中的数据迁移过来，这无疑会导致业务中断，而且也并不是在原有的分区上进行扩容。</p><p>而如果采用了lvm，我们便可以对磁盘空间进行动态管理（扩容和缩容），lvm机制涉及的关键点主要有：</p><ul><li><p>PE（Physical Extend）</p><p>物理扩展，是lvm中的最小存储单元，其大小在在创建卷组时确定，一旦确定不可改变。通常为4.00 MiB</p><blockquote><p>pe大，读取速度快，但浪费空间；pe小，读取速度慢，但节省空间</p></blockquote></li><li><p>LE（Logical Extent）</p><p>逻辑扩展，是逻辑卷可用于分配的最小存储单元，le的大小取决于lv所在vg中的pe的大小，大小等于pe，只不过在lv中称为le。</p></li><li><p>PV（physical volume）</p><p>物理卷，其来源可为一整个磁盘（/dev/sda）或磁盘分区（/dev/sda1），要使用lvm磁盘管理方式，第一步便是先将磁盘创建为pv中。</p><blockquote><p>注：在老版本的linux中使用磁盘分区创建PV时，需要设置该磁盘分区类型为8e（Linux LVM），但在新版本中已经不需要特别设置了，即使是默认的83（Linux）类型，也可创建为pv。<br>默认我们还是修改为8e，养成一个良好的习惯。</p></blockquote></li><li><p>VG（volume group）</p><p>卷组，是物理卷和逻辑卷的中间部分，卷组由多个pv组成，其空间大小等于所有组成卷组的pv之和，在卷组之上可以创建lv。</p></li><li><p>LV（logical volume）</p><p>逻辑卷，在卷组上创建完成之后，对lv进行文件系统格式化后，可挂载使用。lvm的扩缩容实际就是增加或减少组成该lv的pe数量。</p></li></ul><p>如下图所示：</p><h1 id="添加硬盘"><a href="#添加硬盘" class="headerlink" title="添加硬盘"></a>添加硬盘</h1><p>默认新增的硬盘需要重启服务器才可识别出来，是因为重启的使用系统是会重新扫描磁盘设备，也可通过如下方式强制系统重新扫描磁盘设备，从而识别到新添加的硬盘</p><pre class="line-numbers language-none"><code class="language-none"># 列出scsi设备的[root@132 ~]# ls /sys/class/scsi_host/host0  host1  host2[root@132 ~]# echo "- - -" &gt; /sys/class/scsi_host/host0/scan[root@132 ~]# echo "- - -" &gt; /sys/class/scsi_host/host1/scan[root@132 ~]# echo "- - -" &gt; /sys/class/scsi_host/host2/scan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h2><h3 id="pvcreate"><a href="#pvcreate" class="headerlink" title="pvcreate"></a>pvcreate</h3><p>可以将一整块磁盘或磁盘分区创建为物理卷。</p><p><strong>整块磁盘</strong></p><pre class="line-numbers language-none"><code class="language-none">$ pvcreate /dev/sdb  Physical volume "/dev/sdb" successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>磁盘分区</strong></p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/lvm%E5%AE%9E%E8%B7%B5/image-20220901145730046.png" alt="image-20220901145730046"></p><pre class="line-numbers language-none"><code class="language-none">$ pvcreate /dev/sdb1  Physical volume "/dev/sdb1" successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pvscan"><a href="#pvscan" class="headerlink" title="pvscan"></a>pvscan</h3><p>用于扫描已存在的pv。</p><pre class="line-numbers language-none"><code class="language-none">$ pvscan  PV /dev/sda2   VG centos          lvm2 [&lt;19.00 GiB / 0    free]  PV /dev/sdc    VG centos          lvm2 [&lt;15.00 GiB / &lt;3.00 GiB free]  PV /dev/sdb1                      lvm2 [&lt;20.00 GiB]  Total: 3 [53.99 GiB] / in use: 2 [33.99 GiB] / in no VG: 1 [&lt;20.00 GiB]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pvs"><a href="#pvs" class="headerlink" title="pvs"></a>pvs</h3><p>简单查询已存在的pv信息，后面可跟具体的pv名。</p><pre class="line-numbers language-none"><code class="language-none">$ pvs  PV         VG     Fmt  Attr PSize   PFree  /dev/sda2  centos lvm2 a--  &lt;19.00g      0  /dev/sdb1         lvm2 ---  &lt;20.00g &lt;20.00g  /dev/sdc   centos lvm2 a--  &lt;15.00g  &lt;3.00g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pvdisplay"><a href="#pvdisplay" class="headerlink" title="pvdisplay"></a>pvdisplay</h3><p>查询pv的详细信息。</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/lvm%E5%AE%9E%E8%B7%B5/image-20220901151032887.png" alt="image-20220901151032887"></p><p>通过<code>-m|--maps</code>参数可显示le（逻辑扩展）和pv上pe（物理扩展）的映射关系，可用于pvmove数据迁移：</p><pre class="line-numbers language-none"><code class="language-none">$ pvdisplay -m /dev/sdb  --- Physical volume ---  PV Name               /dev/sdb  VG Name               mydata  PV Size               20.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              5119  Free PE               3839  Allocated PE          1280  PV UUID               IFeeR7-uuTg-fP9T-Nbck-9y8M-X0n0-Qut9hU  --- Physical Segments ---  Physical extent 0 to 1279:    Logical volume      /dev/mydata/logs1    Logical extents     0 to 1279  Physical extent 1280 to 5118:    FREE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pvremove"><a href="#pvremove" class="headerlink" title="pvremove"></a>pvremove</h3><p>将已创建的pv移除，需确保该pv未加入任何vg组。</p><pre class="line-numbers language-none"><code class="language-none">$ pvremove /dev/sdb1  Labels on physical volume "/dev/sdb1" successfully wiped.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pvmove"><a href="#pvmove" class="headerlink" title="pvmove"></a>pvmove</h3><p>迁移pv中的数据。试想当我们的pv加入了某一vg，创建了lv并且格式化文件系统挂载后，已有数据存储在该pv所在的磁盘，这时你想将某一pv所在的磁盘归还，那么就涉及到将该pv所在磁盘的数据迁移到其他pv所在的磁盘。</p><p>如：现在有两个pv，分别对应着/dev/sdb和/dev/sdc磁盘，共同属于mydata卷组，且在该卷组上创建了logs1逻辑卷，格式化文件系统类型为ext4，其上存储着2G的数据：</p><pre class="line-numbers language-none"><code class="language-none">$ pvs  PV         VG     Fmt  Attr PSize   PFree  /dev/sdb   mydata lvm2 a--  &lt;20.00g &lt;15.00g  /dev/sdc   mydata lvm2 a--  &lt;15.00g &lt;15.00g$ vgs  VG     #PV #LV #SN Attr   VSize   VFree  mydata   2   1   0 wz--n-  34.99g 29.99g$ lvs  LV    VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert  logs1 mydata -wi-ao----   5.00g$ [root@132 logs]# df -h/dev/mapper/mydata-logs1  4.8G  2.1G  2.6G   45% /mnt/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们需要归还物理卷/dev/sdb所在的磁盘，我们尝试从卷组mydata中删除/dev/sdb物理卷：</p><pre class="line-numbers language-none"><code class="language-none">$ vgreduce mydata /dev/sdb  Physical volume "/dev/sdb" still in use<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>无法删除，提示该pv在使用中，说明有lv中的数据存储在该pv中，查看pv详细信息：</p><pre class="line-numbers language-none"><code class="language-none">$  pvdisplay -m /dev/sdb  --- Physical volume ---  PV Name               /dev/sdb  VG Name               mydata  PV Size               20.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              5119  Free PE               3839  Allocated PE          1280  PV UUID               IFeeR7-uuTg-fP9T-Nbck-9y8M-X0n0-Qut9hU  --- Physical Segments ---  Physical extent 0 to 1279:    Logical volume      /dev/mydata/logs1    Logical extents     0 to 1279  Physical extent 1280 to 5118:    FREE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有1280个pe在被使用中，同时在<code>Physical Segments</code>中可以看到pe:0-1279对应着le:0-1279在被使用中，所以我们需要迁移这部分的数据：</p><pre class="line-numbers language-none"><code class="language-none">$ pvmove /dev/sdb:0-1279 /dev/sdc  /dev/sdb: Moved: 0.31%  /dev/sdb: Moved: 100.00%$ pvdisplay /dev/sdb /dev/sdc  --- Physical volume ---  PV Name               /dev/sdb  VG Name               mydata  PV Size               20.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              5119  Free PE               5119  Allocated PE          0  PV UUID               IFeeR7-uuTg-fP9T-Nbck-9y8M-X0n0-Qut9hU  --- Physical volume ---  PV Name               /dev/sdc  VG Name               mydata  PV Size               15.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              3839  Free PE               2559  Allocated PE          1280  PV UUID               5Xu1I1-IrQD-uMPH-BLfm-GEB9-hIJ9-6NARLs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迁移完成后，便可以从vg中删除该pv：</p><pre class="line-numbers language-none"><code class="language-none">$ vgreduce mydata /dev/sdb  Removed "/dev/sdb" from volume group "mydata"$ pvremove /dev/sdb  Labels on physical volume "/dev/sdb" successfully wiped.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vg"><a href="#vg" class="headerlink" title="vg"></a>vg</h2><h3 id="vgcreate"><a href="#vgcreate" class="headerlink" title="vgcreate"></a>vgcreate</h3><p>创建vg，需要有空闲的pv（即未加入任何vg的pv）。</p><pre class="line-numbers language-none"><code class="language-none">$ vgcreate mydata /dev/sdb1  Volume group "mydata" successfully created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="vgscan"><a href="#vgscan" class="headerlink" title="vgscan"></a>vgscan</h3><p>扫描已经存在的vg</p><pre class="line-numbers language-none"><code class="language-none">$ vgscan  Reading volume groups from cache.  Found volume group "mydata" using metadata type lvm2  Found volume group "centos" using metadata type lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vgs"><a href="#vgs" class="headerlink" title="vgs"></a>vgs</h3><p>简单查询已存在的vg信息，后面可跟具体的vg名。</p><pre class="line-numbers language-none"><code class="language-none">$ vgs  VG     #PV #LV #SN Attr   VSize   VFree  centos   2   3   0 wz--n-  33.99g  &lt;3.00g  mydata   1   0   0 wz--n- &lt;20.00g &lt;20.00g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vgdisplay"><a href="#vgdisplay" class="headerlink" title="vgdisplay"></a>vgdisplay</h3><p>查询vg的详细信息。</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/lvm%E5%AE%9E%E8%B7%B5/image-20220901173300330.png" alt="image-20220901173300330"></p><h3 id="vgremove"><a href="#vgremove" class="headerlink" title="vgremove"></a>vgremove</h3><p>移除已存在的vg，需确保该vg未创建任何lv。</p><pre class="line-numbers language-none"><code class="language-none">$ vgremove mydata  Volume group "mydata" successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="vgextend"><a href="#vgextend" class="headerlink" title="vgextend"></a>vgextend</h3><p>扩展vg，即添加新的pv到vg。</p><pre class="line-numbers language-none"><code class="language-none">$ vgextend mydata /dev/sdb2  Volume group "mydata" successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="vgreduce"><a href="#vgreduce" class="headerlink" title="vgreduce"></a>vgreduce</h3><p>用来缩减vg，即所属vg中的pv。</p><pre class="line-numbers language-none"><code class="language-none">$ vgreduce mydata /dev/sdb2  Removed "/dev/sdb2" from volume group "mydata"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="lv"><a href="#lv" class="headerlink" title="lv"></a>lv</h2><p>在创建或者扩展lv时，我们指定lv名称即可，在查看lv信息时，名称为完整路径：<code>/dev/vg名称/lv名称</code>。</p><h3 id="lvcreate"><a href="#lvcreate" class="headerlink" title="lvcreate"></a>lvcreate</h3><p>创建lv。</p><pre class="line-numbers language-none"><code class="language-none">lvcreate -l|-L 分配大小 -n lv名称 使用的vg名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用参数的区别：</p><ol><li><p>-L 和-l，-L 指定要创建lv的大小，-l指定创建lv的pe数（可指定具体数量，也可按照百分比分配），我们知道lv实际是由pe组成的，pe默认的大小为4M，因此创建的lv大小只能为pe的整数倍。</p><pre class="line-numbers language-none"><code class="language-none">$ lvcreate -L 17M -n mydata-logs mydata  Rounding up size to full physical extent 20.00 MiB  Logical volume "mydata-logs" created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到，我们指定的大小为17M，但实际分配的大小为20M。这是因为pe的大小为4M，之能分配整数倍的pe数。这也就是我们之前说的，pe越大，在分配空间时会浪费存储空间。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ lvcreate -l 4 -n mydata-logs mydata  Logical volume "mydata-logs" created.$ lvdisplay /dev/mydata/mydata-logs  --- Logical volume ---  LV Path                /dev/mydata/mydata-logs  LV Name                mydata-logs  VG Name                mydata  LV UUID                D0LJ4C-VaNi-0gEd-C3am-SQiN-Vvmn-Z7XVw7  LV Write Access        read/write  LV Creation host, time 132.master.k8s, 2022-09-02 09:30:42 +0800  LV Status              available  # open                 0  LV Size                16.00 MiB  Current LE             4  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently set to     8192  Block device           253:3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>指定pe数为4，则分配的空间大小为16M。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ lvcreate -l 50%VG -n mydata-logs mydata# 分配VG中空闲pe数量的一般分配给lv$ lvcreate -l 100%VG -n mydata-logs mydata# 将VG中空闲pe全部分配给lv，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ vgdisplay mydata  --- Volume group ---  VG Name               mydata  System ID  Format                lvm2  Metadata Areas        1  Metadata Sequence No  15  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                0  Open LV               0  Max PV                0  Cur PV                1  Act PV                1  VG Size               &lt;10.00 GiB  PE Size               4.00 MiB  Total PE              2559  Alloc PE / Size       0 / 0  Free  PE / Size       2559 / &lt;10.00 GiB  VG UUID               UrAvf8-1C1J-OYbL-pI0R-W37c-fxWV-cctZNb$ lvcreate -l 2559 -n mydata-logs mydata  Logical volume "mydata-logs" created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可通过vgdispaly查询vg总的空闲pe数（Free PE），并将其全部分配给lv。</p></blockquote><p>这里为什么详细讲了如何将vg的空间全部分配给lv的操作？这是因为该操作你以后可能会经常用，如果只会-L分配空间，那么你可能会遇到下面的情况：</p><pre class="line-numbers language-none"><code class="language-none">$  vgs  VG     #PV #LV #SN Attr   VSize   VFree  centos   2   3   0 wz--n-  33.99g  &lt;3.00g  mydata   1   0   0 wz--n- &lt;10.00g &lt;10.00g$lvcreate -L 10g -n mydata-logs mydata  Volume group "mydata" has insufficient free space (2559 extents): 2560 required.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示小于10G，但是你也不知道具体剩余多大的空间。</p></li></ol><h3 id="lvscan"><a href="#lvscan" class="headerlink" title="lvscan"></a>lvscan</h3><p>扫描已存在的lv。</p><pre class="line-numbers language-none"><code class="language-none">$ lvscan  ACTIVE            '/dev/centos/swap' [2.00 GiB] inherit  ACTIVE            '/dev/centos/root' [&lt;17.00 GiB] inherit  ACTIVE            '/dev/centos/test' [12.00 GiB] inherit  ACTIVE            '/dev/mydata/mydata-logs' [1.00 GiB] inherit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lvs"><a href="#lvs" class="headerlink" title="lvs"></a>lvs</h3><p>简单查看lv信息。</p><pre class="line-numbers language-none"><code class="language-none">$ lvs  LV          VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert  root        centos -wi-ao---- &lt;17.00g  swap        centos -wi-a-----   2.00g  test        centos -wi-ao----  12.00g  mydata-logs mydata -wi-a-----   1.00g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lvdispaly"><a href="#lvdispaly" class="headerlink" title="lvdispaly"></a>lvdispaly</h3><p>查看lv的详细信息。默认查询所有的lv详细信息，可指定具体的lv。</p><pre class="line-numbers language-none"><code class="language-none">$ lvdisplay /dev/mydata/mydata-logs  --- Logical volume ---  LV Path                /dev/mydata/mydata-logs  LV Name                mydata-logs  VG Name                mydata  LV UUID                U9ksiC-Dgz2-X8ZX-p5C9-bLLD-TRXn-NjIxbt  LV Write Access        read/write  LV Creation host, time 132.master.k8s, 2022-09-02 10:36:12 +0800  LV Status              available  # open                 0  LV Size                1.00 GiB  Current LE             256  Segments               1  Allocation             inherit  Read ahead sectors     auto  - currently set to     8192  Block device           253:3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lvremove"><a href="#lvremove" class="headerlink" title="lvremove"></a>lvremove</h3><p>删除某一lv，需确保该lv没有被使用。</p><pre class="line-numbers language-none"><code class="language-none">$ lvremove /dev/mydata/mydata-logsDo you really want to remove active logical volume mydata/mydata-logs? [y/n]: y  Logical volume "mydata-logs" successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lvextend"><a href="#lvextend" class="headerlink" title="lvextend"></a>lvextend</h3><p>扩展lv，这也是lvm的一大特性，通过增加磁盘，创建为pv，然后加入vg组，可以随时用于扩展lv的大小。</p><pre class="line-numbers language-none"><code class="language-none">$ lvextend -L 3g  /dev/mydata/mydata-logs  Size of logical volume mydata/mydata-logs changed from 1.00 GiB (256 extents) to 3.00 GiB (768 extents).  Logical volume mydata/mydata-logs successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>将lv扩展至3G，扩展大小需大于lv当前大小。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ lvextend -L +3g  /dev/mydata/mydata-logs  Size of logical volume mydata/mydata-logs changed from 1.00 GiB (256 extents) to 4.00 GiB (1024 extents).  Logical volume mydata/mydata-logs successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>将lv在原有的基础上增加3G。</p></blockquote><p>也可通过vgdisplay查询剩余pe数，通过-l来指定。</p><h3 id="lvreduce"><a href="#lvreduce" class="headerlink" title="lvreduce"></a>lvreduce</h3><p>缩减lv。</p><pre class="line-numbers language-none"><code class="language-none">$ lvreduce -L -1G /dev/mydata/mydata-logs  WARNING: Reducing active logical volume to 3.00 GiB.  THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce mydata/mydata-logs? [y/n]: y  Size of logical volume mydata/mydata-logs changed from 4.00 GiB (1024 extents) to 3.00 GiB (768 extents).  Logical volume mydata/mydata-logs successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：不可贸然对一个lv直接进行缩减，因为该lv可能已经格式化了文件系统，并被使用。</p><p>要严格按照缩容流程进行缩容：</p><ol><li>卸载已经挂载的逻辑卷</li><li>缩小文件系统</li><li>缩小lv</li><li>查看缩小后的lv</li><li>重新挂载</li></ol></blockquote><p>针对以上操作可能略显不太方便，且不是动态调整，因此可通过下列动态方式缩容（同时缩小文件系统和lv大小）：</p><pre class="line-numbers language-none"><code class="language-none">$ df -h/dev/mapper/mydata-logs  2.9G  9.0M  2.8G    1% /mnt/logs$ lvreduce -L -100M -r /dev/mapper/mydata-logsDo you want to unmount "/mnt/logs" ? [Y|n] yfsck，来自 util-linux 2.23.2/dev/mapper/mydata-logs: 11/196608 files (0.0% non-contiguous), 31036/786432 blocksresize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/mapper/mydata-logs to 760832 (4k) blocks.The filesystem on /dev/mapper/mydata-logs is now 760832 blocks long.  Size of logical volume mydata/logs changed from 3.00 GiB (768 extents) to 2.90 GiB (743 extents).  Logical volume mydata/logs successfully resized.$ df -h/dev/mapper/mydata-logs  2.8G  9.0M  2.7G    1% /mnt/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若已有文件系统，可通过<code>-r</code>参数同时对文件系统进行动态缩容。</p></blockquote><h3 id="lvresize"><a href="#lvresize" class="headerlink" title="lvresize"></a>lvresize</h3><p>调整lv大小，既可调大也可调小。</p><pre class="line-numbers language-none"><code class="language-none">$ lvresize -L 1G /dev/mydata/logs# 将lv调整到指定大小$ lvresize -L +100M /dev/mydata/logs# 将lv增加100M$ lvresize -L -100M /dev/mydata/logs# 将lv减少100M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用lvresize在进行缩容时，若遇到已有文件系统在使用，也需要严格按照缩容流程进行缩容，参考lvreduce。</p></blockquote><p>使用动态方式缩容（同时缩小文件系统和lv大小）</p><pre class="line-numbers language-none"><code class="language-none">$ df -h/dev/mapper/mydata-logs  5.8G   24M  5.5G    1% /mnt/logs$ lvresize --resizefs --size -1G /dev/mydata/logsDo you want to unmount "/mnt/logs" ? [Y|n] yfsck，来自 util-linux 2.23.2/dev/mapper/mydata-logs: 11/393216 files (0.0% non-contiguous), 63598/1572864 blocksresize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/mapper/mydata-logs to 1310720 (4k) blocks.The filesystem on /dev/mapper/mydata-logs is now 1310720 blocks long.  Size of logical volume mydata/logs changed from 6.00 GiB (1536 extents) to 5.00 GiB (1280 extents).  Logical volume mydata/logs successfully resized.$ df -h/dev/mapper/mydata-logs  4.8G   24M  4.6G    1% /mnt/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>--resizefs</code>同时缩小文件系统；<code>--size</code>调整的大小：数值代表调整至多大，+代表增加多少，-代表减少多少。</p></blockquote><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>通过lvm创建好了lv之后，需要对lv格式化文件系统，才能挂载使用。</p><p>不同的文件系统其特点各不相同，所以你需要事先了解各文件系统的特点，选择适合你的进行使用：</p><p>文件系统EXT4和XFS的区别可参考该博客<a href="http://xiaqunfeng.cc/2017/07/06/XFS-vs-EXT4/%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%AE%B0%E4%BD%8F%E7%9A%84%E4%B8%80%E7%82%B9%EF%BC%9A**xfs%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E7%BC%A9%E5%AE%B9%EF%BC%8C%E8%80%8Cext4%E6%94%AF%E6%8C%81**%E3%80%82">http://xiaqunfeng.cc/2017/07/06/XFS-vs-EXT4/，这里我们需要记住的一点：**xfs不支持动态缩容，而ext4支持**。</a></p><p>文件系统格式化：</p><pre class="line-numbers language-none"><code class="language-none">创建了lv后，便可对lv格式化文件系统$ mkfs.ext4 /dev/mydata/logs1# 格式化为ext4文件系统$ mkfs -t ext4 /dev/mydata/logs1# 格式化为ext4文件系统$ mkfs.xfs /dev/mydata/logs1# 格式化为xfs文件系统$ mkfs -t xfs -f /dev/mydata/logs1# 格式化为xfs文件系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式化完成后，可进行挂载使用：</p><pre class="line-numbers language-none"><code class="language-none">$ mkdir /mnt/logs# 创建挂载点$ mount /dev/mapper/mydata-logs1 /mnt/logs/# 手动挂载# 永久性挂载（生产）# 查看该文件系统uuid$ blkid /dev/mapper/mydata-logs1/dev/mapper/mydata-logs1: UUID="011e8b4c-7083-4517-89cc-cebdb0fe6c11" TYPE="xfs"# 在/etc/fstab中添加以下行$ cat /etc/fstabUUID=011e8b4c-7083-4517-89cc-cebdb0fe6c11 /mnt/logs     xfs     defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="lvm创建"><a href="#lvm创建" class="headerlink" title="lvm创建"></a>lvm创建</h1><table><thead><tr><th>磁盘</th><th>磁盘大小</th><th>pv</th><th>PV大小</th><th>vg</th></tr></thead><tbody><tr><td>/dev/sdb</td><td>20G</td><td>/dev/sdb1</td><td>10G</td><td>mydata</td></tr><tr><td>/dev/sdc</td><td>15G</td><td>/dev/sdc</td><td>15G</td><td>mydata</td></tr></tbody></table><table><thead><tr><th>lv</th><th>所属vg</th><th>lv大小</th><th>文件系统</th><th>挂载点</th><th>用途</th></tr></thead><tbody><tr><td>data</td><td>mydata</td><td>10G</td><td>ext4</td><td>/data</td><td>存储数据</td></tr><tr><td>logs</td><td>mydata</td><td>10G</td><td>xfs</td><td>/opt/logs</td><td>存储日志</td></tr></tbody></table><p><strong>1、磁盘分区</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# fdisk /dev/sdb欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。Device does not contain a recognized partition table使用磁盘标识符 0xdd41f53c 创建新的 DOS 磁盘标签。命令(输入 m 获取帮助)：nPartition type:   p   primary (0 primary, 0 extended, 4 free)   e   extendedSelect (default p):Using default response p分区号 (1-4，默认 1)：起始 扇区 (2048-41943039，默认为 2048)：将使用默认值 2048Last 扇区, +扇区 or +size{K,M,G} (2048-41943039，默认为 41943039)：+10G分区 1 已设置为 Linux 类型，大小设为 10 GiB命令(输入 m 获取帮助)：t已选择分区 1Hex 代码(输入 L 列出所有代码)：8e已将分区“Linux”的类型更改为“Linux LVM”命令(输入 m 获取帮助)：wqThe partition table has been altered!Calling ioctl() to re-read partition table.正在同步磁盘。[root@132 ~]# partprobeWarning: 无法以读写方式打开 /dev/sr0 (只读文件系统)。/dev/sr0 已按照只读方式打开。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、创建pv</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# pvcreate /dev/sdb1WARNING: ext4 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y  Wiping ext4 signature on /dev/sdb1.  Physical volume "/dev/sdb1" successfully created.[root@132 ~]# pvcreate /dev/sdc  Physical volume "/dev/sdc" successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、创建vg</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# vgcreate mydata /dev/sdb1  Volume group "mydata" successfully created[root@132 ~]# vgextend mydata /dev/sdc  Volume group "mydata" successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、创建lv</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# lvcreate -n data -L +10G mydataWARNING: xfs signature detected on /dev/mydata/data at offset 0. Wipe it? [y/n]: y  Wiping xfs signature on /dev/mydata/data.  Logical volume "data" created.[root@132 ~]# lvcreate -n logs -L +10G mydata  Logical volume "logs" created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5、创建文件系统</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# mkfs.ext4 /dev/mydata/datamke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2621440 blocks131072 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成[root@132 ~]# mkfs.xfs /dev/mydata/logsmeta-data=/dev/mydata/logs       isize=512    agcount=4, agsize=655360 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0, sparse=0data     =                       bsize=4096   blocks=2621440, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal log           bsize=4096   blocks=2560, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6、临时挂载</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# mkdir /data[root@132 ~]# mount /dev/mapper/mydata-data /data/[root@132 ~]# mkdir /opt/logs[root@132 ~]# mount /dev/mapper/mydata-logs /opt/logs/[root@132 ~]# df -h/dev/mapper/mydata-data  9.8G   37M  9.2G    1% /data/dev/mapper/mydata-logs   10G   33M   10G    1% /opt/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7、永久挂载</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# blkid/dev/mapper/mydata-data: UUID="1cf7256a-bc3a-4bbe-aab9-5f6df6a273d5" TYPE="ext4"/dev/mapper/mydata-logs: UUID="3db3797f-b85d-4c2c-bfec-6a3b721026c5" TYPE="xfs"[root@132 ~]# tail -n 2 /etc/fstabUUID=1cf7256a-bc3a-4bbe-aab9-5f6df6a273d5 /data         ext4    defaults        0 0UUID=3db3797f-b85d-4c2c-bfec-6a3b721026c5 /opt/logs     xfs     defaults        0 0[root@132 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="lvm扩容"><a href="#lvm扩容" class="headerlink" title="lvm扩容"></a>lvm扩容</h1><p>这个比较常用也简单，大体思路为：<code>新增磁盘或分区--&gt;创建PV--&gt;扩容VG--&gt;扩容LV--&gt;扩容文件系统</code>。</p><table><thead><tr><th>磁盘</th><th>磁盘大小</th><th>新增pv</th><th>PV大小</th><th>扩容vg</th></tr></thead><tbody><tr><td>/dev/sdb</td><td>20G</td><td>/dev/sdb2</td><td>10G</td><td>mydata</td></tr></tbody></table><table><thead><tr><th>扩容lv</th><th>所属vg</th><th>扩容大小</th><th>文件系统</th><th>挂载点</th><th>用途</th></tr></thead><tbody><tr><td>data</td><td>mydata</td><td>+5G</td><td>ext4</td><td>/data</td><td>存储数据</td></tr><tr><td>logs</td><td>mydata</td><td>+5G</td><td>xfs</td><td>/opt/logs</td><td>存储日志</td></tr></tbody></table><p><strong>1、磁盘分区</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# fdisk /dev/sdb     # 创建/dev/sdb2，大小10G，选择8e格式。[root@132 ~]# partprobe   # 内核重新加载磁盘分区信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2、创建pv</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# pvcreate /dev/sdb2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3、扩容vg</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# vgextend mydata /dev/sdb2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4、扩容lv</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# lvextend -L +5G /dev/mydata/data[root@132 ~]# lvextend -L +5G /dev/mydata/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>5、扩容文件系统</strong></p><p>对于文件系统，需要根据其文件系统格式对其进行动态的增长。</p><ul><li>xfs文件系统使用xfs_growfs</li><li>ext2、ext3、ext4文件系统使用resize2fs </li></ul><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# resize2fs /dev/mapper/mydata-data# ext4文件系统使用resize2fs动态调整[root@132 ~]# xfs_growfs /dev/mapper/mydata-logs# xfs文件系统使用xfs_growfs动态扩容[root@132 ~]# df -h/dev/mapper/mydata-data   15G   41M   14G    1% /data/dev/mapper/mydata-logs   15G   33M   15G    1% /opt/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="lvm缩容"><a href="#lvm缩容" class="headerlink" title="lvm缩容"></a>lvm缩容</h1><h2 id="xfs文件系统"><a href="#xfs文件系统" class="headerlink" title="xfs文件系统"></a>xfs文件系统</h2><p>centos7.x默认使用xfs格式的文件系统，而我们前面讲到xfs格式的文件系统不支持动态缩容，但有时我们却需要对其进行缩容，那应该怎么做？</p><p>笔者遇到的情况：</p><p>申请虚拟机的时候，申请磁盘大小为500G，到手之后，发现我的/home目录大小为341G，而/目录却只有50G（经询问，是其虚拟机安装模板原因导致），这是极其不合理。</p><p>在使用过程中发现，因为使用习惯的不同，/目录空间严重不足，但/home目录空间却及其充裕，只能想办法将/home的容量转移到/目录下。</p><pre class="line-numbers language-none"><code class="language-none">$ df -hTFilesystem              Type      Size  Used Avail Use% Mounted on/dev/mapper/centos-root xfs        50G   33G   18G  65% /devtmpfs                devtmpfs  7.8G     0  7.8G   0% /devtmpfs                   tmpfs     7.8G     0  7.8G   0% /dev/shmtmpfs                   tmpfs     7.8G  754M  7.1G  10% /runtmpfs                   tmpfs     7.8G     0  7.8G   0% /sys/fs/cgroup/dev/vda1               xfs      1014M  145M  870M  15% /boot/dev/mapper/centos-home xfs       341G  512M  341G   1% /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1、整体思路</strong></p><p>1、备份/home分区（xfsdump、dd）<br>2、归还/home占用的lv<br>3、创建新的/dev/mapper/centos-home<br>4、创建文件系统并挂载使用<br>5、将归还的容量在线扩容至/分区</p><p><strong>2、安装xfsdump</strong></p><pre class="line-numbers language-none"><code class="language-none">$ yum install xfsdump.x86_64 -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3、查看是否有进程占用/home目录</strong></p><pre class="line-numbers language-none"><code class="language-none">$ fuser -u -v -m /home/                     USER        PID ACCESS COMMAND/home:               root     kernel mount (root)/home                     root      91618 F.ce. (root)redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有一个redis-server在/home目录下运行，可以手动去关闭占用/home目录的进程，也可以直接干掉。</p><p>因为我这里的redis服务是自己单独搭建的，没有什么特别用处，所以直接干掉。</p><pre class="line-numbers language-none"><code class="language-none">fuser -u -m -v -k -i /home/                     USER        PID ACCESS COMMAND/home:               root     kernel mount (root)/home                     root      91618 F.ce. (root)redis-serverKill process 91618 ? (y/N) y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、备份/home分区</strong></p><pre class="line-numbers language-none"><code class="language-none">$ xfsdump -l 0 -L home -M home -f /mnt/home.xfsdump /homexfsdump: using file dump (drive_simple) strategyxfsdump: version 3.1.7 (dump format 3.0) - type ^C for status and controlxfsdump: level 0 dump of master:/homexfsdump: dump date: Thu Jul  4 16:23:12 2019xfsdump: session id: 80a42690-a616-42a8-97cb-8c21b1f1ca60xfsdump: session label: "home"xfsdump: ino map phase 1: constructing initial dump listxfsdump: ino map phase 2: skipping (no pruning necessary)xfsdump: ino map phase 3: skipping (only one dump stream)xfsdump: ino map construction completexfsdump: estimated dump size: 501980992 bytesxfsdump: creating dump session media file 0 (media 0, file 0)xfsdump: dumping ino mapxfsdump: dumping directoriesxfsdump: dumping non-directory filesxfsdump: ending media filexfsdump: media file size 499016800 bytesxfsdump: dump size (non-dir files) : 498318632 bytesxfsdump: dump complete: 0 seconds elapsedxfsdump: Dump Summary:xfsdump:   stream 0 /mnt/home.xfsdump OK (success)xfsdump: Dump Status: SUCCESS$ ll /mnt/home.xfsdump-rw-r--r-- 1 root root 499016800 Jul  4 16:23 /mnt/home.xfsdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5、卸载/home目录</strong></p><pre class="line-numbers language-none"><code class="language-none">$ umount /home/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>6、调整/home目录大小</strong></p><pre class="line-numbers language-none"><code class="language-none">lvreduce -L 50G /dev/centos/home  WARNING: Reducing active logical volume to 50.00 GiB.  THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce centos/home? [y/n]: y  Size of logical volume centos/home changed from &lt;341.12 GiB (87326 extents) to 50.00 GiB (12800 extents).  Logical volume centos/home successfully resized.$ lvs  LV   VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert  home centos -wi-a----- 50.00g  root centos -wi-ao---- 50.00g  swap centos -wi-a----- &lt;7.88g$ vgs  VG     #PV #LV #SN Attr   VSize    VFree  centos   1   3   0 wz--n- &lt;399.00g 291.12g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7、扩容/分区</strong></p><pre class="line-numbers language-none"><code class="language-none">$ lvextend -L +290G /dev/centos/root  Size of logical volume centos/root changed from 50.00 GiB (12800 extents) to 340.00 GiB (87040 extents).  Logical volume centos/root successfully resized.$ xfs_growfs /dev/mapper/centos-rootmeta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=3276800 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0 spinodes=0data     =                       bsize=4096   blocks=13107200, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal               bsize=4096   blocks=6400, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0data blocks changed from 13107200 to 89128960$ df -hTFilesystem              Type      Size  Used Avail Use% Mounted on/dev/mapper/centos-root xfs       340G   33G  308G  10% /devtmpfs                devtmpfs  7.8G     0  7.8G   0% /devtmpfs                   tmpfs     7.8G     0  7.8G   0% /dev/shmtmpfs                   tmpfs     7.8G  754M  7.1G  10% /runtmpfs                   tmpfs     7.8G     0  7.8G   0% /sys/fs/cgroup/dev/vda1               xfs      1014M  145M  870M  15% /boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到/目录已经增大了</p><p><strong>8、格式化/home所在lv</strong></p><p>接下来需要重新格式化下/home分区，若不格式化，而直接挂载会提示无法读取设备</p><pre class="line-numbers language-none"><code class="language-none">$ mount /dev/mapper/centos-home /home/mount: /dev/mapper/centos-home: can't read superblock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>格式化</p><pre class="line-numbers language-none"><code class="language-none">$ mkfs.xfs -f /dev/mapper/centos-homemeta-data=/dev/mapper/centos-home isize=512    agcount=4, agsize=3276800 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0, sparse=0data     =                       bsize=4096   blocks=13107200, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal log           bsize=4096   blocks=6400, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ mount /dev/mapper/centos-home /home/$ df -hT/dev/mapper/centos-home xfs        50G   33M   50G   1% /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>9、还原备份的数据</strong> </p><pre class="line-numbers language-none"><code class="language-none">$ xfsrestore -f /mnt/home.xfsdump /home/xfsrestore: using file dump (drive_simple) strategyxfsrestore: version 3.1.7 (dump format 3.0) - type ^C for status and controlxfsrestore: searching media for dumpxfsrestore: examining media file 0xfsrestore: dump description:xfsrestore: hostname: masterxfsrestore: mount point: /homexfsrestore: volume: /dev/mapper/centos-homexfsrestore: session time: Thu Jul  4 16:23:12 2019xfsrestore: level: 0xfsrestore: session label: "home"xfsrestore: media label: "home"xfsrestore: file system id: 9353acc1-1f16-4599-a6ba-614a088b3d9fxfsrestore: session id: 80a42690-a616-42a8-97cb-8c21b1f1ca60xfsrestore: media id: 11205bc3-acf3-44a4-9ccb-8444c7a3bafexfsrestore: using online session inventoryxfsrestore: searching media for directory dumpxfsrestore: reading directoriesxfsrestore: 250 directories and 2072 entries processedxfsrestore: directory post-processingxfsrestore: restoring non-directory filesxfsrestore: restore complete: 1 seconds elapsedxfsrestore: Restore Summary:xfsrestore:   stream 0 /mnt/home.xfsdump OK (success)xfsrestore: Restore Status: SUCCESS$ df -hT/dev/mapper/centos-home xfs        50G  512M   50G   1% /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10、重新启动redis-server服务</strong></p><pre class="line-numbers language-none"><code class="language-none">$ fuser -u -m -v /home/                     USER        PID ACCESS COMMAND/home:               root     kernel mount (root)/home                     root      30684 F.c.. (root)redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ext4文件系统"><a href="#ext4文件系统" class="headerlink" title="ext4文件系统"></a>ext4文件系统</h2><p>前面我们讲过ext4是支持动态缩容的，首先我们来了解缩容的流程（动态缩容也是遵循这个流程的）：</p><ol><li><p>卸载已经挂载的逻辑卷</p><pre class="line-numbers language-none"><code class="language-none">$ umount /dev/mapper/centos-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>缩小文件系统</p><pre class="line-numbers language-none"><code class="language-none">$ resize2fs /dev/mapper/centos-test 12Gresize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/mapper/centos-test to 3145728 (4k) blocks.The filesystem on /dev/mapper/centos-test is now 3145728 blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查文件系统</p><pre class="line-numbers language-none"><code class="language-none">$ e2fsck /dev/mapper/centos-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>缩小lv</p><pre class="line-numbers language-none"><code class="language-none">$ lvreduce -L -1G /dev/mapper/centos-test  WARNING: Reducing active logical volume to 12.00 GiB.  THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce centos/test? [y/n]: y  Size of logical volume centos/test changed from 13.00 GiB (3328 extents) to 12.00 GiB (3072 extents).  Logical volume centos/test successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>挂载</p><pre class="line-numbers language-none"><code class="language-none">mount /dev/mapper/centos-test /mnt/test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>需要确保文件系统缩减的大小和lv缩减的大小一致。</p></blockquote><p><strong>动态缩容</strong></p><pre class="line-numbers language-none"><code class="language-none">$ lvresize --resizefs --size 15G /dev/centos/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>--size</code>指定LV和文件系统的新大小，例如15G。 <code>--resizefs</code>指定调整lv大小的同时调整其已有文件系统的大小。 它比<code>resize2fs</code> + <code>lvresize</code>更好，因为管理员不太可能意外地为<code>resize2fs</code>和<code>lvresize</code>使用不一致的参数（即lv和文件系统的大小保持一致）。</p><p><code>lvreduce -r</code>也可实现同时缩小lv和文件系统。</p></blockquote><p><strong>缩小vg</strong></p><p>一般缩容了lv，其容量会归还到所属vg中，但是有时候我们并不是仅仅想缩容文件系统和lv，而是要归还底层提供存储的磁盘，那么就需要继续缩容vg和pv。</p><p>vg的缩容是通过删除vg中的pv来减少vg容量的，删除vg中的pv时，首先要查看是否有文件系统的数据存储在该pv上，如果有，需要先将该pv中的数据迁移到同vg中其他的pv上：</p><p>查看vg中所有pv的详细信息：通过<code>-m</code>参数查看pv和lv的映射关系</p><pre class="line-numbers language-none"><code class="language-none">[root@132 ~]# pvdisplay -m /dev/sdb /dev/sdc  --- Physical volume ---  PV Name               /dev/sdb  VG Name               centos  PV Size               20.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              5119  Free PE               2047  Allocated PE          3072  PV UUID               Sz7PEo-5Bxx-oo1s-4Amf-PzLg-rGcW-sP7EWY  --- Physical Segments ---  Physical extent 0 to 3071:    Logical volume      /dev/centos/test    Logical extents     0 to 3071  Physical extent 3072 to 5118:    FREE  --- Physical volume ---  PV Name               /dev/sdc  VG Name               centos  PV Size               15.00 GiB / not usable 4.00 MiB  Allocatable           yes  PE Size               4.00 MiB  Total PE              3839  Free PE               3839  Allocated PE          0  PV UUID               E1Hd9x-JiAH-5JRB-eoeE-LEmu-Y9iO-6rg4DP  --- Physical Segments ---  Physical extent 0 to 3838:    FREE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>pv：/dev/sdb</code>的物理片段：0-3071被<code>lv：/dev/centos/test</code>所使用（即PE:0-3071对应LE:0-3071），因此我们需要将该部分PE迁移到<code>pv：/dev/sdc</code>上。</p><p>确保同属<code>vg：centos</code>中的<code>pv：/dev/sdc</code>剩余的空间大于<code>pv：/dev/sdb</code>要迁移的数据大小。</p><p>迁移：</p><pre class="line-numbers language-none"><code class="language-none">$ pvmove /dev/sdb:0-3071 /dev/sdc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>迁移完成后，删除vg中的<code>pv：/dev/sdb</code></p><pre class="line-numbers language-none"><code class="language-none">$ vgreduce centos /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除pv</p><pre class="line-numbers language-none"><code class="language-none">pvremove /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此便可退还磁盘/dev/sdb。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们发现，xfs格式的文件系统在缩容时候，若文件系统上有服务，会导致服务的暂停。</p><p>这还是基于lvm分区方式，若采用非lvm方式（传统分区方式），那么不论何种文件类型的文件系统，扩容和缩容都是会导致服务的中断，这在生产环境是难以接受的。</p><p>因此，我们需要在项目开始时尽可能确定好磁盘分区方式和文件类型，规划好磁盘空间，避免出现需暂停服务的情况。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> lvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传统分区扩容</title>
      <link href="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/"/>
      <url>/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>采用传统分区方式，/分区空间不足，进行扩容。</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -h文件系统        容量  已用  可用 已用% 挂载点/dev/sda2        10G  5.1G  5.0G   51% /devtmpfs        476M     0  476M    0% /devtmpfs           487M     0  487M    0% /dev/shmtmpfs           487M  7.8M  479M    2% /runtmpfs           487M     0  487M    0% /sys/fs/cgroup/dev/sda3       2.0G  133M  1.9G    7% /home/dev/sda5       2.0G  441M  1.6G   22% /var/dev/sda1      1014M  127M  888M   13% /boottmpfs            98M     0   98M    0% /run/user/0[root@localhost ~]# lsblkNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda      8:0    0   30G  0 disk├─sda1   8:1    0    1G  0 part /boot├─sda2   8:2    0   10G  0 part /├─sda3   8:3    0    2G  0 part /home├─sda4   8:4    0    1K  0 part├─sda5   8:5    0    2G  0 part /var└─sda6   8:6    0    2G  0 part [SWAP]sr0     11:0    1  4.3G  0 rom[root@localhost ~]# fdisk /dev/sda欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：p磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000be0dd   设备 Boot      Start         End      Blocks   Id  System/dev/sda1   *        2048     2099199     1048576   83  Linux/dev/sda2         2099200    23070719    10485760   83  Linux/dev/sda3        23070720    27265023     2097152   83  Linux/dev/sda4        27265024    41943039     7339008    5  Extended/dev/sda5        27267072    31461375     2097152   83  Linux/dev/sda6        31463424    35657727     2097152   82  Linux swap / Solaris[root@localhost ~]# blkid/dev/sda1: UUID="d729ccdf-0758-4da4-9987-7dd6dd8568a3" TYPE="xfs"/dev/sda2: UUID="999ec53d-eb7a-4910-adc7-7af108be0bc7" TYPE="xfs"/dev/sda3: UUID="9fb315e6-2db2-4ca6-80b9-e62f3cd3321d" TYPE="xfs"/dev/sda5: UUID="60d03bd3-88de-4f90-82d0-5c47fb5faf9e" TYPE="xfs"/dev/sda6: UUID="572d914a-9f23-42ba-a2ce-a899daab0366" TYPE="swap"/dev/sr0: UUID="2018-11-25-23-54-16-00" LABEL="CentOS 7 x86_64" TYPE="iso9660" PTTYPE="dos"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>/dev/sda总共已有6个分区，启动分区位于/dev/sda1，因此不用动。/分区位于/dev/sda2，其后有/home位于/dev/sda3分区，扩展分区/dev/sda4，/var位于逻辑分区/dev/sda5，swap位于逻辑分区/dev/sda6。</p><p>因为/分区/dev/sda2的扩容势必会挤压以后分区所位于磁盘的位置，导致数据丢失，因此先备份/dev/sda2之后的所有存有数据的分区：/dev/sda3、/dev/sda5</p><p>并在/etc/fstab中关闭备份分区的自动挂载。</p><p>因为/var分区涉及openssh服务的目录，当删除该分区后，默认会在/下生成新的/var基础目录，但因权限问题导致openssh服务无法启动，因此需要在控制台进行后去还原操作。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>刷新缓存数据到磁盘</p><pre class="line-numbers language-none"><code class="language-none">$ sync<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭swap、备份/home、/var所在分区。</p><pre class="line-numbers language-none"><code class="language-none">$ swapoff -a$ dd if=/dev/sda3 of=/mnt/homebak$ dd if=/dev/sda5 of=/mnt/varbak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>后面的磁盘操作，切记在一个fdisk中完成</strong></p><p>删除分区至/dev/sda1</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# fdisk /dev/sda欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：p磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000be0dd   设备 Boot      Start         End      Blocks   Id  System/dev/sda1   *        2048     2099199     1048576   83  Linux/dev/sda2         2099200    23070719    10485760   83  Linux/dev/sda3        23070720    27265023     2097152   83  Linux/dev/sda4        27265024    41943039     7339008    5  Extended/dev/sda5        27267072    31461375     2097152   83  Linux/dev/sda6        31463424    35657727     2097152   82  Linux swap / Solaris命令(输入 m 获取帮助)：d分区号 (1-6，默认 6)：分区 6 已删除命令(输入 m 获取帮助)：d分区号 (1-5，默认 5)：分区 5 已删除命令(输入 m 获取帮助)：d分区号 (1-4，默认 4)：分区 4 已删除命令(输入 m 获取帮助)：d分区号 (1-3，默认 3)：分区 3 已删除命令(输入 m 获取帮助)：d分区号 (1,2，默认 2)：分区 2 已删除命令(输入 m 获取帮助)：p磁盘 /dev/sda：32.2 GB, 32212254720 字节，62914560 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000be0dd   设备 Boot      Start         End      Blocks   Id  System/dev/sda1   *        2048     2099199     1048576   83  Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新分配/分区，切记上面的fdisk不要关闭（原来为10G，现在改为15G）：</p><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：nPartition type:   p   primary (1 primary, 0 extended, 3 free)   e   extendedSelect (default p):Using default response p分区号 (2-4，默认 2)：起始 扇区 (2099200-62914559，默认为 2099200)：将使用默认值 2099200Last 扇区, +扇区 or +size{K,M,G} (2099200-62914559，默认为 62914559)：+15G分区 2 已设置为 Linux 类型，大小设为 15 GiB命令(输入 m 获取帮助)：wqThe partition table has been altered!Calling ioctl() to re-read partition table.WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.The kernel still uses the old table. The new table will be used atthe next reboot or after you run partprobe(8) or kpartx(8)正在同步磁盘。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器</p><pre class="line-numbers language-none"><code class="language-none">$ reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来在终端操作（因为服务器无法启动），输入root密码进入终端：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907134412155.png" alt="image-20220907134412155"></p><p>对/分区进行文件系统扩容：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907134625363.png" alt="image-20220907134625363"></p><p>继续创建/分区后面的/home分区：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907134755593.png" alt="image-20220907134755593"></p><p>继续创建扩展分区：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907134848910.png" alt="image-20220907134848910"></p><p>继续创建/var所在的逻辑分区/dev/sda5：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907134936569.png" alt="image-20220907134936569"></p><p>继续创建swap分区，并调整文件系统格式为82：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907135202385.png" alt="image-20220907135202385"></p><p>保存后，重新读取磁盘分区：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907135243775.png" alt="image-20220907135243775"></p><p>还原/home分区和/var分区数据，还原后端/dev/sda3和/dev/sda5的uuid与原来是一样的：</p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907135519345.png" alt="image-20220907135519345"></p><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907140119820.png" alt="image-20220907140119820"></p><p>但是新的分区swap却没有uuid，因此我们需要先在/etc/fstab中注释swap的挂载，让系统先可以重新启动：</p><pre class="line-numbers language-none"><code class="language-none">$ mkswap /dev/sda6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/09/01/linux/%E7%A3%81%E7%9B%98/%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/image-20220907140254523.png" alt="image-20220907140254523"></p><p>重新启动服务器：</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>harbor升级nginx组件</title>
      <link href="/2022/08/16/harbor/harbor%E5%8D%87%E7%BA%A7nginx%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/08/16/harbor/harbor%E5%8D%87%E7%BA%A7nginx%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近收到Nginx版本存在0day漏洞的信息，影响范围为：Nginx&lt;=1.21.6。</p><p>通过扫描发现harbor服务运行的<code>goharbor/nginx-photon:v2.2.1</code>容器内部的nginx版本为1.19.3，本以为对harbor进行升级即可，可通过<a href="https://github.com/goharbor/harbor/issues/17378">issues</a>发现稳定发行版v2.5.3仍然使用的nginx1.19.3。</p><p><img src="/2022/08/16/harbor/harbor%E5%8D%87%E7%BA%A7nginx%E7%BB%84%E4%BB%B6/image-20220816102817539.png" alt="image-20220816102817539"></p><p>同样对发布候选版v2.6.0-rc2进行测试，发现仍然是nginx/1.19.3。</p><p><img src="/2022/08/16/harbor/harbor%E5%8D%87%E7%BA%A7nginx%E7%BB%84%E4%BB%B6/image-20220816103634242.png" alt="image-20220816103634242"></p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>通过issue可以发现默认的nginx版本依赖于<code>Photon 4.0</code> tdnf仓库，其定义于<a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base">dockerfile</a>中</p><p>这里有三个关键的文件：</p><ul><li><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile</a></li><li><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile</a></li><li><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base</a></li></ul><p>其中<a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile">Makefile</a>文件定义了如何去构建harbor所依赖的所有组件镜像，<a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile">Dockerfile</a>为<code>goharbor/nginx-photon:v2.5.3</code>镜像的Dockerfile，<a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base">Dockerfile.base</a>为<code>goharbor/harbor-nginx-base:v2.5.3</code>镜像的Dockerfile。</p><p>查看Makefile：</p><pre class="line-numbers language-none"><code class="language-none"># Makefile for a harbor project## Targets:## build: build harbor photon images# clean:clean core and jobservice harbor images# commonSHELL := /bin/bashBUILDPATH=$(CURDIR)MAKEPATH=$(BUILDPATH)/makeSRCPATH=./srcTOOLSPATH=$(CURDIR)/toolsSEDCMD=$(shell which sed)WGET=$(shell which wget)CURL=$(shell which curl)TIMESTAMP=$(shell date +"%Y%m%d")# docker parametersDOCKERCMD=$(shell which docker)DOCKERBUILD=$(DOCKERCMD) build --no-cacheDOCKERBUILD_WITH_PULL_PARA=$(DOCKERBUILD) --pull=$(PULL_BASE_FROM_DOCKERHUB)DOCKERRMIMAGE=$(DOCKERCMD) rmiDOCKERIMAGES=$(DOCKERCMD) imagesIMAGENAMESPACE=goharborBASEIMAGENAMESPACE=goharbor省略......NGINX=nginxDOCKERFILEPATH_NGINX=$(DOCKERFILEPATH)/$(NGINX)DOCKERFILENAME_NGINX=DockerfileDOCKERIMAGENAME_NGINX=$(IMAGENAMESPACE)/$(NGINX)-photon省略......_build_nginx:@$(call _build_base,$(NGINX),$(DOCKERFILEPATH_NGINX))@echo "building nginx container for photon..."@$(DOCKERBUILD_WITH_PULL_PARA) --build-arg harbor_base_image_version=$(BASEIMAGETAG) --build-arg harbor_base_namespace=$(BASEIMAGENAMESPACE) -f $(DOCKERFILEPATH_NGINX)/$(DOCKERFILENAME_NGINX) -t $(DOCKERIMAGENAME_NGINX):$(VERSIONTAG) .@echo "Done."<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看Dockerfile：</p><pre class="line-numbers language-none"><code class="language-none">ARG harbor_base_image_versionARG harbor_base_namespaceFROM ${harbor_base_namespace}/harbor-nginx-base:${harbor_base_image_version}VOLUME /var/cache/nginx /var/log/nginx /runSTOPSIGNAL SIGQUITHEALTHCHECK CMD curl --fail -s http://localhost:8080 || exit 1USER nginxCMD ["nginx", "-g", "daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看Dockerfile.base：</p><pre class="line-numbers language-none"><code class="language-none">FROM photon:4.0RUN tdnf install -y nginx shadow &gt;&gt; /dev/null \    &amp;&amp; tdnf clean all \    &amp;&amp; groupadd -r -g 10000 nginx &amp;&amp; useradd --no-log-init -r -g 10000 -u 10000 nginx \    &amp;&amp; ln -sf /dev/stdout /var/log/nginx/access.log \    &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可发现<code>goharbor/nginx-photon:v2.5.3</code>依赖于<code>goharbor/harbor-nginx-base:v2.5.3</code>，而nginx是在<code>goharbor/harbor-nginx-base:v2.5.3</code>中从<code>photon:4.0</code>的tdnf源中获取的。</p><p>那么我们本地测试<code>photon:4.0</code>的tdnf源中的nginx版本是多少？</p><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker pull photon:4.0[root@harbor ~]# docker run -it --rm  photon:4.0 /bin/bashroot [ / ]# tdnf install -y nginxroot [ / ]# nginx -Vnginx version: nginx/1.22.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为最新稳定版nginx/1.22.0，说明<code>photon:4.0</code>镜像中的tdnf源现在拥有nginx/1.22.0最新稳定版，而harbor发行<a href="https://github.com/goharbor/harbor/releases/download/v2.5.3/harbor-offline-installer-v2.5.3.tgz">harbor-offline-installer-v2.5.3.tgz</a>的那个时间所依赖的<code>goharbor/harbor-nginx-base:v2.5.3</code>的基础镜像<code>photon:4.0</code> tdnf源中可能当时的nginx版本只有nginx/1.19.3而导致的，或其他原因。</p><p>那么我们手动构建一个即可：</p><p>分析<a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile">Makefile</a>文件，获取镜像的构建命令：</p><pre class="line-numbers language-none"><code class="language-none"># goharbor/harbor-nginx-base:v2.5.3docker build --no-cache -f Dockerfile.base -t goharbor/harbor-nginx-base:v2.5.3 .# goharbor/nginx-photon:v2.5.3docker build --no-cache --build-arg harbor_base_image_version=v2.5.3 --build-arg harbor_base_namespace=goharbor -f Dockerfile -t goharbor/nginx-photon:v2.5.3 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="升级nginx-photon组件"><a href="#升级nginx-photon组件" class="headerlink" title="升级nginx-photon组件"></a>升级nginx-photon组件</h1><h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><pre class="line-numbers language-none"><code class="language-none"># 创建构建目录[root@harbor ~]# mkdir /root/nginx &amp;&amp; cd /root/nginx# 获取goharbor/nginx-photon:v2.5.3 Dockerfile[root@harbor nginx]# cat DockerfileARG harbor_base_image_versionARG harbor_base_namespaceFROM ${harbor_base_namespace}/harbor-nginx-base:${harbor_base_image_version}VOLUME /var/cache/nginx /var/log/nginx /runSTOPSIGNAL SIGQUITHEALTHCHECK CMD curl --fail -s http://localhost:8080 || exit 1USER nginxCMD ["nginx", "-g", "daemon off;"]# 获取goharbor/harbor-nginx-base:v2.5.3 Dockerfile[root@harbor nginx]# cat Dockerfile.baseFROM photon:4.0RUN tdnf install -y nginx shadow &gt;&gt; /dev/null \    &amp;&amp; tdnf clean all \    &amp;&amp; groupadd -r -g 10000 nginx &amp;&amp; useradd --no-log-init -r -g 10000 -u 10000 nginx \    &amp;&amp; ln -sf /dev/stdout /var/log/nginx/access.log \    &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><pre class="line-numbers language-none"><code class="language-none">[root@harbor nginx]# docker build --no-cache -f Dockerfile.base -t goharbor/harbor-nginx-base:v2.5.3 .[root@harbor nginx]# docker build --no-cache --build-arg harbor_base_image_version=v2.5.3 --build-arg harbor_base_namespace=goharbor -f Dockerfile -t goharbor/nginx-photon:v1.0.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构建完成后将镜像导出<code>docker save goharbor/nginx-photon:v1.0.0 -o nginx-photon.tgz</code>并上传至生产环境进行导入<code>docker load -i nginx-photon.tgz</code></p><h2 id="升级nginx组件"><a href="#升级nginx组件" class="headerlink" title="升级nginx组件"></a>升级nginx组件</h2><p>停掉nginx组件</p><pre class="line-numbers language-none"><code class="language-none">$ docker-compose stop proxy$ docker-compose rm proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改docker-compose.yml文件：</p><pre class="line-numbers language-none"><code class="language-none">230   proxy:231     harborimage: goharbor/nginx-photon:v2.5.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动nginx组件:</p><pre class="line-numbers language-none"><code class="language-none">$ docker-compose up -d proxyharbor-log is up-to-dateharbor-portal is up-to-dateredis is up-to-dateregistry is up-to-dateharbor-db is up-to-dateharbor-core is up-to-dateCreating nginx ... done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">$ docker-compose exec proxy /bin/bashnginx [ / ]$ nginx -Vnginx version: nginx/1.22.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>实际上harbor中portal和proxy都用到了nginx，但是portal并未对外映射端口，因此也未被扫描到，可以不用修复。若需修复，修复方式可参考proxy的流程。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://github.com/goharbor/harbor/issues/17378">https://github.com/goharbor/harbor/issues/17378</a></p></li><li><p><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/Makefile</a></p></li><li><p><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile</a></p></li><li><p><a href="https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base">https://github.com/goharbor/harbor/blob/v2.5.3/make/photon/nginx/Dockerfile.base</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> harbor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7升级</title>
      <link href="/2022/08/15/mysql/mysql%E5%8D%87%E7%BA%A7/"/>
      <url>/2022/08/15/mysql/mysql%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h1><p><strong>前提：</strong></p><p>数据库全量备份：</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -uroot -p --single-transaction --all-databases=true &gt; all-sqlbak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="In-Place-Upgrade（就地升级）"><a href="#In-Place-Upgrade（就地升级）" class="headerlink" title="In-Place Upgrade（就地升级）"></a>In-Place Upgrade（就地升级）</h2><p>就地升级包括关闭旧的MySQL服务器，用新的MySQL二进制文件或程序包替换旧的MySQL二进制文件或程序包，在现有数据目录上重新启动MySQL以及升级现有安装中需要升级的任何其余部分。</p><p><strong>执行In-Place Upgrade：</strong></p><ol><li><p>设置mysql为缓慢关闭</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p --execute="SET GLOBAL innodb_fast_shutdown=0"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>通过缓慢的关闭，InnoDB将在关闭之前执行完全清除和更改缓冲区合并，以确保在两个版本之间的文件格式存在差异时，可以充分准备数据文件。</p></blockquote></li><li><p>关闭mysql</p><pre class="line-numbers language-none"><code class="language-none">mysqladmin -u root -p shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>升级mysql二进制安装包</p><pre class="line-numbers language-none"><code class="language-none">tar zxf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz -C /usr/local/src/rm -fr /usr/local/software/mysqlln -s /usr/local/src/mysql-5.7.31-linux-glibc2.12-x86_64/ /usr/local/software/mysqlchown mysql:mysql -R mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MYSQL_BIN=/usr/local/software/mysql/bin<br>export PATH=$PATH:${MYSQL_BIN}</p><p>确保环境变量中引用<code>/usr/local/software/mysql/bin</code>下二进制文件。</p><p>mysql -V 查看版本</p></blockquote></li><li><p>使用存在的数据目录启动mysql5.7</p><pre class="line-numbers language-none"><code class="language-none">创建存放mysqld_safe运行时存放mysqld.pid文件的目录mkdir /var/run/mysqldchown mysql:mysql /var/run/mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># --user为启动mysqld服务的用户mysqld_safe --user=mysql --datadir=/data/mysql &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动mysql_upgrade</p><pre class="line-numbers language-none"><code class="language-none">mysql_upgrade -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mysql_upgrade检查所有数据库中的所有表是否与当前版本的MySQL不兼容。 mysql_upgrade还会升级mysql系统数据库，以便您可以利用新的特权或功能。</p><p>mysql_upgrade不会升级时区表或帮助表的内容。</p></blockquote><p><strong>输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@harbor software]# mysql_upgrade -u root -pEnter password: Checking if update is needed.Checking server version.Running queries to upgrade MySQL server.Checking system database.mysql.columns_priv                                 OKmysql.db                                           OKmysql.engine_cost                                  OKmysql.event                                        OKmysql.func                                         OKmysql.general_log                                  OKmysql.gtid_executed                                OKmysql.help_category                                OKmysql.help_keyword                                 OKmysql.help_relation                                OKmysql.help_topic                                   OKmysql.innodb_index_stats                           OKmysql.innodb_table_stats                           OKmysql.ndb_binlog_index                             OKmysql.plugin                                       OKmysql.proc                                         OKmysql.procs_priv                                   OKmysql.proxies_priv                                 OKmysql.server_cost                                  OKmysql.servers                                      OKmysql.slave_master_info                            OKmysql.slave_relay_log_info                         OKmysql.slave_worker_info                            OKmysql.slow_log                                     OKmysql.tables_priv                                  OKmysql.time_zone                                    OKmysql.time_zone_leap_second                        OKmysql.time_zone_name                               OKmysql.time_zone_transition                         OKmysql.time_zone_transition_type                    OKmysql.user                                         OKThe sys schema is already up to date (version 1.5.2).Found 0 sys functions, but expected 22. Re-installing the sys schema.Upgrading the sys schema.Checking databases.gdsgbpx.enroll_base_info                           OKgdsgbpx.qrtz_blob_triggers                         OKgdsgbpx.qrtz_calendars                             OKgdsgbpx.qrtz_cron_triggers                         OKgdsgbpx.qrtz_fired_triggers                        OKgdsgbpx.qrtz_job_details                           OKgdsgbpx.qrtz_locks                                 OKgdsgbpx.qrtz_paused_trigger_grps                   OKgdsgbpx.qrtz_scheduler_state                       OKgdsgbpx.qrtz_simple_triggers                       OKgdsgbpx.qrtz_simprop_triggers                      OKgdsgbpx.qrtz_triggers                              OKgdsgbpx.query_config                               OKgdsgbpx.tareaorg                                   OKgdsgbpx.tbl_config                                 OKgdsgbpx.tbl_data                                   OKgdsgbpx.tbl_demo_generator                         OKgdsgbpx.tbl_dict                                   OKgdsgbpx.tbl_file                                   OKgdsgbpx.tbl_function                               OKgdsgbpx.tbl_function_filter                        OKgdsgbpx.tbl_markdown                               OKgdsgbpx.tbl_message                                OKgdsgbpx.tbl_message_attachment                     OKgdsgbpx.tbl_message_group                          OKgdsgbpx.tbl_message_group_user                     OKgdsgbpx.tbl_message_receiver                       OKgdsgbpx.tbl_org                                    OKgdsgbpx.tbl_role                                   OKgdsgbpx.tbl_role_function                          OKgdsgbpx.tbl_simple_mail                            OKgdsgbpx.tbl_user                                   OKgdsgbpx.tbl_user_avatar                            OKgdsgbpx.tbl_user_log                               OKgdsgbpx.tbl_user_oauth                             OKgdsgbpx.tbl_user_role                              OKgdsgbpx.ttrainingorg                               OKgdsgbpx.ttrainnew                                  OKgdsgbpx.ttrainnewbatch                             OKgdsgbpx.ttrainnewbatch_bak                         OKgdsgbpx.ttrainnewbatch_bak2                        OKgdsgbpx.ttrainnewbatch_log                         OKgdsgbpx.ttrainnewbatchcondition                    OKgdsgbpx.ttrainnewprestu                            OKgdsgbpx.ttrainnewprestu_bak                        OKgdsgbpx.ttrainnewprestu_log                        OKgdsgbpx.ttrainnewstu                               OKgdsgbpx.ttrainnewstu_log                           OKgdsgbpx.ttrainnewstu_logs                          OKgdsgbpx.ttrainnewstumain                           OKsys.sys_config                                     OKsz_test.log_common_log                             OKsz_test.log_trace_log                              OKsz_test.sys_dict                                   OKsz_test.sys_dict_type                              OKsz_test.sys_menu                                   OKsz_test.sys_org                                    OKsz_test.sys_ref_role_menu                          OKsz_test.sys_ref_usr_role                           OKsz_test.sys_role                                   OKsz_test.sys_user                                   OKsz_test.tb_train_class                             OKsz_test.tb_train_leave                             OKsz_test.tb_train_leave_file                        OKsz_test.tb_train_ref_file                          OKsz_test.tb_train_ref_stu                           OKUpgrade process completed successfully.Checking if update is needed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关闭并重启mysql服务，确定所有的修改已经生效</p><pre class="line-numbers language-none"><code class="language-none">mysqladmin -u root -p shutdownmysqld_safe --user=mysql --datadir=/data/mysql &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>systemctl restart mysqld</code>重启即可</p></blockquote></li></ol><p>升级完毕。</p><h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><p><a href="https://dev.mysql.com/doc/refman/5.7/en/upgrade-binary-package.html">https://dev.mysql.com/doc/refman/5.7/en/upgrade-binary-package.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix6.0部署</title>
      <link href="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h1><table><thead><tr><th>操作系统/安装软件</th><th>版本</th></tr></thead><tbody><tr><td>ubuntu</td><td>20.04.1</td></tr><tr><td>kernel</td><td>5.4.0-122-generic</td></tr><tr><td>mysql</td><td>8.0.30</td></tr><tr><td>zabbix_server、zabbix_agent</td><td>6.0.7</td></tr></tbody></table><h1 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h1><h2 id="安装zabbix存储库"><a href="#安装zabbix存储库" class="headerlink" title="安装zabbix存储库"></a>安装zabbix存储库</h2><pre class="line-numbers language-none"><code class="language-none"># wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-3+ubuntu20.04_all.deb# dpkg -i zabbix-release_6.0-3+ubuntu20.04_all.deb# apt update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装zabbix-server-frontend-agent"><a href="#安装zabbix-server-frontend-agent" class="headerlink" title="安装zabbix server, frontend, agent"></a>安装zabbix server, frontend, agent</h2><pre class="line-numbers language-none"><code class="language-none"># apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p><strong>安装要求：</strong></p><table><thead><tr><th>数据库软件</th><th>支持的版本</th></tr></thead><tbody><tr><td><em>MySQL/Percona</em></td><td>8.0.X</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"># mysql -uroot -h 127.0.0.1 -ppasswordmysql&gt; create database zabbix character set utf8mb4 collate utf8mb4_bin;mysql&gt; create user 'zabbix'@'%' identified by 'password';mysql&gt; grant all privileges on zabbix.* to 'zabbix'@'%';mysql&gt; flush privileges;mysql&gt; quit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入初始化数据：</p><pre class="line-numbers language-none"><code class="language-none"># zcat /usr/share/doc/zabbix-sql-scripts/mysql/server.sql.gz | mysql -uzabbix -h 127.0.0.1 -p -D zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置zabbix-server的数据库连接密码"><a href="#配置zabbix-server的数据库连接密码" class="headerlink" title="配置zabbix server的数据库连接密码"></a>配置zabbix server的数据库连接密码</h2><p>编辑<code>/etc/zabbix/zabbix_server.conf</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">DBHost=127.0.0.1DBUser=zabbixDBPassword=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置zabbix的前端"><a href="#配置zabbix的前端" class="headerlink" title="配置zabbix的前端"></a>配置zabbix的前端</h2><p>编辑<code>/etc/zabbix/nginx.conf</code>文件，取消对listen和server_name指令的注释：</p><pre class="line-numbers language-none"><code class="language-none">listen          8080;server_name     192.168.168.226;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动zabbix服务和agent"><a href="#启动zabbix服务和agent" class="headerlink" title="启动zabbix服务和agent"></a>启动zabbix服务和agent</h2><pre class="line-numbers language-none"><code class="language-none"># systemctl restart zabbix-server zabbix-agent2 nginx php7.4-fpm# systemctl enable zabbix-server zabbix-agent2 nginx php7.4-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置zabbix-fronend"><a href="#配置zabbix-fronend" class="headerlink" title="配置zabbix fronend"></a>配置zabbix fronend</h2><p>访问<a href="http://192.168.168.226:8080/setup.php">http://192.168.168.226:8080/setup.php</a></p><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><pre class="line-numbers language-none"><code class="language-none"># 安装中文库$ apt install language-pack-zh-hans -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启server：<code>systemctl restart zabbix-server</code>，打开<a href="http://192.168.168.226:8080/setup.php%E9%A1%B5%E9%9D%A2%EF%BC%8C%E6%9F%A5%E7%9C%8BDefault">http://192.168.168.226:8080/setup.php页面，查看Default</a> language是否可选Chinese（zh-CN）。如果不行，请按照以下方式继续：</p><p>编辑<code>/etc/locale.gen</code>文件</p><pre class="line-numbers language-none"><code class="language-none"># 取消注释zh_CN.UTF-8 UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译语言包</p><pre class="line-numbers language-none"><code class="language-none">$ locale-genGenerating locales (this might take a while)...  en_US.UTF-8... done  zh_CN.UTF-8... done  zh_SG.UTF-8... doneGeneration complete.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时清空缓存重新打开<a href="http://192.168.168.226:8080/setup.php%E9%A1%B5%E9%9D%A2%EF%BC%8C%E6%9F%A5%E7%9C%8BDefault">http://192.168.168.226:8080/setup.php页面，查看Default</a> language是否可选Chinese（zh-CN）。</p><p>如若不可以：</p><p>编辑<code>/etc/default/locale</code>文件，修改系统默认语言：</p><pre class="line-numbers language-none"><code class="language-none">LANG=en_US.UTF-8改为LANG=zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改之后重启服务器。</p><h2 id="设置流程"><a href="#设置流程" class="headerlink" title="设置流程"></a>设置流程</h2><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220802174916319.png" alt="image-20220802174916319"></p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220803084813175.png" alt="image-20220803084813175"></p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220804172326457.png" alt="image-20220804172326457"></p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220803084915506.png" alt="image-20220803084915506"></p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220804172507563.png" alt="image-20220804172507563"></p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220803084957511.png" alt="image-20220803084957511"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>zabbix默认用户名：Admin，默认密码：zabbix</p><h2 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h2><p>默认安装的zabbix显示中文字体时存在乱码情况，打开<code>监测</code>-&gt;<code>主机</code>-&gt;<code>图形</code>可发现中文字体无法正常显示：</p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220804185251266.png" alt="image-20220804185251266"></p><p>zabbix默认的字体文件为：<code>/usr/share/zabbix/assets/fonts/graphfont.ttf -&gt; /etc/alternatives/zabbix-frontend-font</code>，可通过使用windows上的字体文件进行替换修复此问题。</p><p>步骤：</p><ol><li><code>win+r</code>输入fonts，选择自己喜欢的字体</li><li>这里我选择<code>华文楷体 常规</code>上传至服务器</li><li>覆盖原有的字体文件：<code>cp -r -p  /home/guptwlxy/STKAITI.TTF /etc/alternatives/zabbix-frontend-font</code></li><li>刷新zabbix页面即可</li></ol><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220804191756119.png" alt="image-20220804191756119"></p><h1 id="zabbix-agent-amp-agent2介绍"><a href="#zabbix-agent-amp-agent2介绍" class="headerlink" title="zabbix agent &amp; agent2介绍"></a>zabbix agent &amp; agent2介绍</h1><p><a href="https://www.zabbix.com/documentation/6.0/zh/manual/appendix/agent_comparison">https://www.zabbix.com/documentation/6.0/zh/manual/appendix/agent_comparison</a></p><p>zabbix agent工具用于采集主机的数据并上报至zabbix server，部署于需要监控的主机节点，目前有zabbix-agent和zabbix-agent2两种，简略对比情况如下：</p><table><thead><tr><th>参数</th><th>zabbix-agent</th><th>zabbix-agent2</th></tr></thead><tbody><tr><td>编程语言</td><td>C</td><td>Go，部分使用C</td></tr><tr><td>守护进程</td><td>支持</td><td>仅由 systemd （在 Windows 上是）</td></tr><tr><td>支持的扩展</td><td>C中的自定义<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/loadablemodules">可加载模块</a></td><td>Go 中的自定义<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/plugins">插件</a></td></tr><tr><td>进程</td><td>每个服务器/代理记录的单独主动检查进程。</td><td>具有自动创建线程的单个进程。<br>最大线程数由 GOMAXPROCS 环境变量确定。</td></tr><tr><td>指标</td><td><strong>UNIX</strong>: 查看支持的<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/itemtypes/zabbix_agent">监控项</a>列表。<br><strong>Windows</strong>: 查看其他Windows 特定<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/itemtypes/zabbix_agent/win_keys">监控项</a>的列表。</td><td><strong>UNIX</strong>: Zabbix agent支持的所有指标。<br>此外，代理 2 为以下对象提供 Zabbix-native 监控解决方案：Docker, Memcached, MySQL, PostgreSQL, Redis, systemd,和其他监控目标 - 请参阅代理 2 特定<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2">监控项</a>的完整列表。<br> <strong>Windows</strong>: Zabbix agent代理支持的所有指标，以及HTTPS、LDAP 的net.tcp.service* 检查。<br>此外，agent 2 为 PostgreSQL、Redis 提供了 Zabbix-native 监控解决方案。</td></tr><tr><td>并发</td><td>单个服务器的主动检查按顺序执行。</td><td>来自不同插件的检查或一个插件内的多个检查可以同时执行。</td></tr><tr><td>持久性存储</td><td>不支持</td><td>支持</td></tr></tbody></table><p>关键点：zabbix-agent2不仅支持zabbix-agent的监控项，还支持对Docker, Memcached, MySQL, PostgreSQL, Redis, systemd等进行监控，所以一般推荐使用zabbix-agent2，官方默认安装的zabbix-agent。</p><h2 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix-agent"></a>zabbix-agent</h2><h2 id="zabbix-agent2"><a href="#zabbix-agent2" class="headerlink" title="zabbix-agent2"></a>zabbix-agent2</h2><h3 id="批量安装（linux）"><a href="#批量安装（linux）" class="headerlink" title="批量安装（linux）"></a>批量安装（linux）</h3><pre class="line-numbers language-none"><code class="language-none"># 下载并安装zabbix-agent2$ ansible linux -m shell -a 'wget https://repo.huaweicloud.com/zabbix/zabbix/6.0/rhel/7/x86_64/zabbix-agent2-6.0.7-1.el7.x86_64.rpm -O /tmp/zabbix-agent2-6.0.7-1.el7.x86_64.rpm &amp;&amp; yum localinstall /tmp/zabbix-agent2-6.0.7-1.el7.x86_64.rpm -y &amp;&amp; rm -fr /tmp/zabbix-agent2-6.0.7-1.el7.x86_64.rpm'# 修改配置文件(192.168.168.226为zabbix server主机IP)$ ansible linux -m shell -a 'sed -i "s#Server=127.0.0.1#Server=192.168.168.226#g" /etc/zabbix/zabbix_agent2.conf'# 启动服务$ ansible linux -m systemd -a 'name=zabbix-agent2.service state=started enabled=true'# 添加防火墙策略$ ansible linux -m shell -a 'iptables -I INPUT -p tcp -s 192.168.168.226 --dport 10050 -j ACCEPT &amp;&amp; service iptables save'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量安装（windows）"><a href="#批量安装（windows）" class="headerlink" title="批量安装（windows）"></a>批量安装（windows）</h3><pre class="line-numbers language-none"><code class="language-none"># 下载zabbix-agent2$ wget https://cdn.zabbix.com/zabbix/binaries/stable/6.0/6.0.7/zabbix_agent2-6.0.7-windows-amd64-openssl.msi# 创建安装脚本$ cat install.bat@echo offtitle install zabbix-agent2 :: 获取以太网ipfor /f "tokens=16" %%i in ('ipconfig ^|find /i "ipv4"') do set ip=%%i:: 安装zabbix_agent2-6.0.7-windows-amd64-openssl.msimsiexec /i C:\Users\Administrator\Desktop\zabbix_agent2-6.0.7-windows-amd64-openssl.msi /qb InstallFolder="E:\bestmem\bestmem_install\Zabbix Agent 2\"  Server="192.168.168.226"  Hostname=%ip%# 拷贝安装包和安装脚本到目标主机$ ansible windows -m win_copy -a 'src=./zabbix_agent2-6.0.7-windows-amd64-openssl.msi dest=C:\Users\Administrator\Desktop\'$ ansible windows -m win_copy -a 'src=./install.bat dest=C:\Users\Administrator\Desktop\'$ ansible windows -m win_shell -a 'C:\Users\Administrator\Desktop\install.bat'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量添加监控"><a href="#批量添加监控" class="headerlink" title="批量添加监控"></a>批量添加监控</h3><p>首先在<code>配置</code>–&gt;<code>主机</code>–&gt;<code>创建主机</code>中创建一个主机模板：</p><blockquote><p><code>主机名称</code>应与<code>可见的名称</code>一致，否则无法批量修改。</p><p>批量添加的主机应该确保<code>模板</code>、<code>群组</code>的信息是一致的，不一致的部分后续手动修改。</p></blockquote><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220822150428559.png" alt="image-20220822150428559"></p><p>然后将该模板导出：</p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220822150647341.png" alt="image-20220822150647341"></p><p>将<code>zbx_export_hosts.yaml</code>文件上传至linux服务器，并在同级目录下创建以下shell脚本，执行后生成批量导入文件<code>zbx_input_hosts.yaml</code>：</p><blockquote><p>修改变量<code>zbx_export_hosts</code>为主机模板文件zbx_export_hosts.yaml中的主机名称字段</p><p>修改变量<code>hosts</code>为需要批量添加的主机</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@194 all<span class="token punctuation">]</span><span class="token comment"># ls</span>zbx_export_hosts.yaml  zbx_input_hosts.sh  zbx_input_hosts.yaml<span class="token punctuation">[</span>root@194 all<span class="token punctuation">]</span><span class="token comment"># cat zbx_input_hosts.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">zbx_export_hosts</span><span class="token operator">=</span><span class="token number">192.168</span>.168.192<span class="token comment"># 修改为主机模板文件zbx_export_hosts.yaml中的主机名称字段</span><span class="token assign-left variable">hosts</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">192.168</span>.168.202 <span class="token number">192.168</span>.168.206 <span class="token number">192.168</span>.168.208 <span class="token number">192.168</span>.168.209 <span class="token number">192.168</span>.168.218 <span class="token number">192.168</span>.168.219 <span class="token number">192.168</span>.168.220 <span class="token number">192.168</span>.168.221 <span class="token number">192.168</span>.168.222 <span class="token number">192.168</span>.168.225<span class="token punctuation">)</span><span class="token comment"># 需要批量添加的主机</span><span class="token assign-left variable">tmp_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/zbx_export_hosts.yaml<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token variable">${tmp_name}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">'没有zabbix模板文件: zbx_export_hosts.yaml'</span>   <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token variable">${hosts<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$host</span> <span class="token operator">==</span> <span class="token variable">${hosts<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">sed</span> <span class="token string">"s#<span class="token variable">${zbx_export_hosts}</span>#<span class="token variable">${host}</span>#g"</span> <span class="token variable">${tmp_name}</span> <span class="token operator">&gt;&gt;</span> zbx_input_hosts.yaml        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token function">sed</span> -n <span class="token string">"s#<span class="token variable">${zbx_export_hosts}</span>#<span class="token variable">${host}</span>#g;/hosts:/,\<span class="token variable">$p</span>"</span> <span class="token variable">${tmp_name}</span> <span class="token operator">|</span> <span class="token function">tail</span> -n +2 <span class="token operator">&gt;&gt;</span> zbx_input_hosts.yaml<span class="token keyword">done</span><span class="token punctuation">[</span>root@194 all<span class="token punctuation">]</span><span class="token comment"># bash ./zbx_input_hosts.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行成功后，拷贝<code>zbx_input_hosts.yaml</code>文件到桌面，并进行导入：</p><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220822174944613.png" alt="image-20220822174944613"></p><p>等待片刻，可查看<code>可用性</code>是否正常：</p><blockquote><p>灰色为初始状态，绿色为正常状态，红色为警告状态</p><p>如果一直为灰色，可通过重启zabbix server来解决。如果为红色，需要检查zabbix agent是否正常。</p></blockquote><p><img src="/2022/08/02/zabbix/zabbix6.0%E9%83%A8%E7%BD%B2/image-20220822180107266.png" alt="image-20220822180107266"></p><h1 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h1><p><a href="https://www.zabbix.com/documentation/6.0/zh/manual/installation/requirements">https://www.zabbix.com/documentation/6.0/zh/manual/installation/requirements</a></p><p><a href="https://www.zabbix.com/download?zabbix=6.0&amp;os_distribution=ubuntu&amp;os_version=20.04_focal&amp;db=mysql&amp;ws=nginx">https://www.zabbix.com/download?zabbix=6.0&amp;os_distribution=ubuntu&amp;os_version=20.04_focal&amp;db=mysql&amp;ws=nginx</a></p><p><a href="https://www.zabbix.com/documentation/6.0/zh/manual/appendix/agent_comparison">https://www.zabbix.com/documentation/6.0/zh/manual/appendix/agent_comparison</a></p>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7部署</title>
      <link href="/2022/08/01/mysql/mysql5.7%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/08/01/mysql/mysql5.7%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="docker方式"><a href="#docker方式" class="headerlink" title="docker方式"></a>docker方式</h1><h2 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull mysql:5.7.39<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建以下映射目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> /data/mysql/<span class="token punctuation">{</span>conf,data,log<span class="token punctuation">}</span> -p <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> <span class="token number">777</span> /data/mysql/log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建mysql配置文件：</p><pre class="line-numbers language-none"><code class="language-none">$ cat &gt; /data/mysql/conf/mysql.cnf &lt;&lt; EOF[mysqld]user = mysqlport = 3306skip-host-cacheskip-name-resolvedatadir = /data/mysqlpid-file=/var/run/mysqld/mysqld.pidsocket=/var/run/mysqld/mysqld.socksecure-file-priv=/var/lib/mysql-fileslog_timestamps=SYSTEMexplicit_defaults_for_timestamp=truetls_version=TLSv1.2# 设置MySQL服务器允许进行加密连接的TLS协议server-id = 1# 数据库唯一标识log-bin = /data/mysql/mysql-bin# 开启binlog日志记录binlog_format = row# binlog记录格式，有statement, row和mixed三种log-slave-updates = 1# 开启log-slave-updates参数后，从库从主库复制的数据会写入log-bin日志文件里# 不需要同步的库，对一下库的操作不会记录在binlog日志中binlog-ignore-db=mysqlbinlog-ignore-db=information_schemabinlog-ignore-db=performance_schemabinlog-ignore-db=sysexpire_logs_days = 30# 设置bin-log最多保存30天，30天前的会自动删除max_binlog_size = 500M# 设置单个binlog日志文件最大500M，如果mysql-bin.000001超过500M，则会生成一个mysql-bin.000002用于保存binlog日志，以此类推。（默认重启数据库也会重新生成一个新的binlog日志文件）# 开启GTID主从复制gtid-mode = onenforce_gtid_consistency = onmaster_info_repository = TABLErelay_log_info_repository = TABLEsync-master-info = 1slave-parallel-workers = 8binlog-checksum = CRC32master-verify-checksum = 1# slave-sql-verify-checksum = 1binlog-rows-query-log-events = 1# 开启在binlog日志中记录用户发出的原始sqlback_log = 200max_connections = 1000max_allowed_packet = 100Mmax_user_connections = 1000max_connect_errors = 99999open_files_limit = 65535connect_timeout = 30interactive_timeout = 1800wait_timeout = 1800group_concat_max_len = 102400# 开启审计日志，审计插件：McAfee MySQL Audit Plugin，docker容器方式暂不支持。# plugin-load=AUDIT=libaudit_plugin.so# audit_json_file=on# audit_offsets=7824, 7872, 3632, 4792, 456, 360, 0, 32, 64, 160, 536, 7988, 4360, 3648, 3656, 3660, 6072, 2072, 8, 7056, 7096, 7080, 13472, 148, 672, 0# audit_record_cmds=insert,delete,update,create,drop,revoke,alter,grant,setsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# 开启慢查询日志记录slow_query_log = ONslow_query_log_file = /var/log/slow.loglong_query_time = 10# 开启错误日志记录log-error=/var/log/mysqld.log[client]socket=/var/run/mysqld/mysqld.sock[mysql]default-character-set=utf8EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d <span class="token punctuation">\</span>--name mysql <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always <span class="token punctuation">\</span>--log-driver json-file <span class="token punctuation">\</span>--log-opt max-size<span class="token operator">=</span>50m <span class="token punctuation">\</span>--log-opt max-file<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>-v /data/mysql/conf:/etc/mysql/conf.d/ <span class="token punctuation">\</span>-v /data/mysql/data:/data/mysql/ <span class="token punctuation">\</span>-v /data/mysql/log:/var/log/ <span class="token punctuation">\</span>-v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime <span class="token punctuation">\</span>-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>-p <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>mysql:5.7.39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class="line-numbers language-none"><code class="language-none">$ docker exec -it mysql /bin/bashbash-4.2# mysql -uroot -p# 初始化密码为123456mysql&gt; update mysql.user set authentication_string=password('new_password') where user='root';mysql&gt; flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建博客系统</title>
      <link href="/2022/06/21/%E6%9D%82%E8%B0%88/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/06/21/%E6%9D%82%E8%B0%88/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h1><p><img src="/2022/06/21/%E6%9D%82%E8%B0%88/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/%E5%88%9B%E5%BB%BAgithub%E4%BB%93%E5%BA%93.png"></p><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p><a href="https://nodejs.org/zh-cn/">官网</a>下载安装包，安装即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> -vv16.14.2$ <span class="token function">npm</span> -v<span class="token number">8.5</span>.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a><strong>安装hexo-cli</strong></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 npm 全局安装 hexo-cli</span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 安装完成后本地初始化站点目录</span>$ hexo init bestmem.github.io$ <span class="token builtin class-name">cd</span> bestmem.github.io$ <span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插件安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 该插件用于hexo上传静态文件至github仓库，--save的作用为将该插件记录到package.json文件中，方便后续npm install直接安装。</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>目录结构介绍</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tree -L <span class="token number">1</span><span class="token builtin class-name">.</span>├── _config.landscape.yml├── _config.yml<span class="token comment"># 网站的配置信息</span>├── node_modules├── package.json<span class="token comment"># 应用程序信息</span>├── package-lock.json├── scaffolds<span class="token comment"># 模版文件夹</span>├── <span class="token builtin class-name">source</span><span class="token comment"># 资源文件夹是存放用户资源的地方</span>└── themes<span class="token comment"># 主题文件夹。Hexo 会根据主题来生成静态页面。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>hexo init</code>的时候，会从github上clone相关代码，若warning SSL证书相关的问题，可通过<code>git config --global http.sslVerify false</code>忽略证书的验证。</p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a><strong>基础配置</strong></h1><p>配置文件分为网站配置文件和主题配置文件</p><ul><li>网站配置文件位于：<code>bestmem.github.io/_config.yml</code></li><li>主题配置文件位于：<code>themes</code>目录下相应的主题内的<code>_config.yml</code></li></ul><h2 id="修改网站配置文件"><a href="#修改网站配置文件" class="headerlink" title="修改网站配置文件"></a>修改网站配置文件</h2><p><a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> _config.yml<span class="token comment"># Site</span>title: Hexo<span class="token comment"># 设置title</span>subtitle: <span class="token string">''</span>description: <span class="token string">''</span>keywords:author: bestmem<span class="token comment"># 设置作者信息</span>language: zh-CN<span class="token comment"># 设置语言</span>timezone: <span class="token string">'Asia/Shanghai'</span><span class="token comment"># 设置时区</span><span class="token comment"># 配置你的网站站点地址</span>url: https://bestmem.github.io/<span class="token comment"># 配置本地静态文件需要部署的仓库地址</span>deploy:  type: <span class="token string">'git'</span>  repo: https://github.com/bestmem/bestmem.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以尝试在本地运行默认配置的博客系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo serverINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问<a href="http://localhost:4000/">http://localhost:4000</a></p><p><img src="/2022/06/21/%E6%9D%82%E8%B0%88/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B5%E9%9D%A2.png"></p><p>运行没有问题后，可通过如下命令生成静态文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令<code>hexo clean</code>，清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。然后再重新生成静态页面。</p></blockquote><p>并将其部署到github服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后便可打开你的github站点地址进行访问：<a href="https://bestmem.github.io/">https://bestmem.github.io/</a></p><h1 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h1><h2 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h2><h3 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h3><p>可以使用<code>Typora</code>+<code>PicGo</code>+<code>aliyun OSS</code>将图片保存在对象存储中，方便文章加载图片。</p><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>修改主配置文件<code>_config.yml</code>，开启自动创建与文章同级同名的图片存储目录</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装插件：</p><pre class="line-numbers language-none"><code class="language-none">npm i https://github.com/7ym0n/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：使用<code>https://github.com/7ym0n/hexo-asset-image</code>插件，而不是<code>hexo-asset-image</code>插件，否则可能会造成生成静态文件后网页加载图片路径错误。</p></blockquote><p>创建文章：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new 本地存储使用文章INFO  Validating configINFO  Created: C:<span class="token punctuation">\</span>bestmem<span class="token punctuation">\</span>document<span class="token punctuation">\</span>bestmem.github.io<span class="token punctuation">\</span>source<span class="token punctuation">\</span>_posts<span class="token punctuation">\</span>本地存储使用文章.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开文件夹<code>C:\bestmem\document\bestmem.github.io\source\_posts\</code>，会发现多了名为<code>本地存储使用文章</code>的文件夹，用于存储图片文件。</p><p>在文章<code>本地存储使用文章.md</code>中通过相对路径加载图片</p><pre class="line-numbers language-none"><code class="language-none">![](本地存储使用文章/测试.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文件并推送至github：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean <span class="token operator">&amp;&amp;</span> hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="文章分类存储"><a href="#文章分类存储" class="headerlink" title="文章分类存储"></a>文章分类存储</h2><p>默认我们使用<code>hexo new [layout] (title)</code>创建文章时，是在<code>source/_posts</code>下生成的文章Markdown文件和图片存储目录，这会导致当我们有大量文章时，该目录显得杂乱。</p><p>因此好的规范是：根据你博文的分类<code>categories</code>来创建相应的父目录存储文章。</p><p>我们的<code>hexo-github搭建博客系统.md</code>属于<code>杂谈</code>分类，因此我们的创建方式如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new post -p 杂谈/hexo-github搭建博客系统<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h1><p><strong>新建一个网站</strong></p><pre class="line-numbers language-none"><code class="language-none">$ hexo init [folder]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建文章</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"hexo+github搭建博客系统"</span>INFO  Validating configINFO  Created: C:<span class="token punctuation">\</span>bestmem<span class="token punctuation">\</span>document<span class="token punctuation">\</span>bestmem.github.io<span class="token punctuation">\</span>source<span class="token punctuation">\</span>_posts<span class="token punctuation">\</span>hexo-github搭建博客系统.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接编写该Markdown文件即可开始你的博客之旅了。</p><p><strong>本地访问</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>清除缓存文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生成静态文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span class="token comment"># 可简写为hexo g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>部署服务</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>列出网站资料</strong></p><pre class="line-numbers language-none"><code class="language-none">$ hexo list &lt;type&gt;Arguments:  type  Available types: page, post, route, tag, category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>发表草稿</strong></p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>主题可以让我们为自己的博客设置喜欢的风格，那么如何寻找主题呢？</p><p>hexo默认提供了主题库：<a href="https://hexo.io/themes/">点我访问</a>，我们可以选择自己喜欢的主题，在github上查找其下载地址。也可以通过github<a href="https://docs.github.com/cn/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax">搜索语法</a>自行搜索热门主题<code>hexo theme stars:&gt;1000</code></p><p>这里我们选择的是<code>hexo-theme-matery</code>主题，进行下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> themes$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.gitCloning into <span class="token string">'hexo-theme-matery'</span><span class="token punctuation">..</span>.remote: Enumerating objects: <span class="token number">5415</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">74</span>/74<span class="token punctuation">)</span>, done.remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">51</span>/51<span class="token punctuation">)</span>, done.remote: Total <span class="token number">5415</span> <span class="token punctuation">(</span>delta <span class="token number">30</span><span class="token punctuation">)</span>, reused <span class="token number">55</span> <span class="token punctuation">(</span>delta <span class="token number">21</span><span class="token punctuation">)</span>, pack-reused <span class="token number">5341</span>Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5415</span>/5415<span class="token punctuation">)</span>, <span class="token number">19.68</span> MiB <span class="token operator">|</span> <span class="token number">60.00</span> KiB/s, done.Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3461</span>/3461<span class="token punctuation">)</span>, done.$ <span class="token function">ls</span>hexo-theme-matery/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考该主题<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">配置文档说明</a></p><p><strong>插件安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-generator-search --save<span class="token comment"># Hexo 插件来做内容搜索</span><span class="token function">npm</span> i hexo-permalink-pinyin --save<span class="token comment"># 使在生成文章时生成中文拼音的永久链接，利于SEO</span><span class="token function">npm</span> i hexo-wordcount --save<span class="token comment"># 文章字数统计插件</span><span class="token function">npm</span> i hexo-generator-feed --save<span class="token comment"># 添加 RSS 订阅支持</span><span class="token function">npm</span> i hexo-filter-github-emojis --save<span class="token comment"># 添加emoji表情支持</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>page创建</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span class="token comment"># 新建分类 categories 页，用来展示所有分类的页面</span>hexo new page <span class="token string">"tags"</span><span class="token comment"># 新建标签 tags 页，用来展示所有标签的页面</span>hexo new page <span class="token string">"contact"</span><span class="token comment"># 新建留言板 contact 页</span>hexo new page <span class="token number">404</span><span class="token comment"># 新建 404 页</span>hexo new page <span class="token string">"friends"</span><span class="token comment"># 新建友情链接 friends 页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件</strong></p><p>这里贴出我自己的配置文件，方便后续使用</p><ol><li><p>网站配置文件</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 小二来了subtitle: ''description: ''keywords:author: bestmemlanguage: zh-CNtimezone: 'Asia/Shanghai'# URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://bestmem.github.io/permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link:  enable: true # Open external links in new tab  field: site # Apply to the whole site  exclude: ''filename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight:  enable: false  line_number: true  auto_detect: false  tab_replace: ''  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ''# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: ''  per_page: 12  order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports 'mtime', 'date', 'empty'updated_option: 'mtime'# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-matery# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: 'git'  repo: https://github.com/bestmem/bestmem.github.io.git  branch: master  # 添加emoji表情支持# npm install hexo-filter-github-emojis --savegithubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:  # 添加RSS订阅支持# npm install hexo-generator-feed --savefeed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主题配置文件</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># main menu navigation url and icon# 配置菜单导航的名称、路径和图标icon.menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Contact:    url: /contact    icon: fas fa-comments  Friends:    url: /friends    icon: fas fa-address-book  # 二级菜单写法如下  #Medias:  #  icon: fas fa-list  #  children:  #    - name: Musics  #      url: /musics  #      icon: fas fa-music  #    - name: Movies  #      url: /movies  #      icon: fas fa-film  #    - name: Books  #      url: /books  #      icon: fas fa-book  #    - name: Galleries  #      url: /galleries  #      icon: fas fa-image# Website start time.# 站点运行开始时间.time:  enable: true  year: 2022 # 年份  month: 06 # 月份  date: 21 # 日期  hour: 00 # 小时  minute: 00 # 分钟  second: 00 # 秒# Index cover carousel configuration.# 首页封面轮播图的相关配置.cover:  showPrevNext: true # 是否显示左右切换按钮. Whether to display the left and right toggle buttons.  showIndicators: true # 是否显示指示器. # Whether to display the indicators  autoLoop: true # 是否自动轮播. Whether it is automatically rotated.  duration: 120 # 切换延迟时间. Switching delay time.  intervalTime: 5000 # 自动切换下一张的间隔时间. Automatically switch the interval of the next one.  useConfig: false # 是否使用配置文件, 在 _data/covers.json 下配置推荐文章, false则使用主题在文章中的配置 cover coverImg  # useConfig 使用方式: 将主题 hexo-theme-matery/source/_data/covers.json 移动到 my-blog/source/_data/下修改配置即可  video:    enable: true    src:       - https://txmov2.a.yximgs.com/upic/2021/04/09/22/BMjAyMTA0MDkyMjMwMDhfMTg1ODk2MDg4N180NzUyOTMyMjA4Nl8xXzM=_b_B8e080d7ede19e6674d48a9f12545007b.mp4?pkey=AAVAfNhi5_f-HGkIPXrY5w6nyf4JibwOY-WwdHgSJ2aSoi-2WQLpiYDunLbRZQuESz875eMdsepRlVFtXg9nuQY58uRc-7AsF0kEMNR6QYBj56g9JFFMSGdsoKK2-SV27u8&amp;tag=1-1617978682-xpcwebprofile-0-lcvipceuti-9e40072f87531f1a&amp;clientCacheKey=3xbbtbrfxqpccp4_b.mp4      - https://txmov2.a.yximgs.com/upic/2021/04/09/21/BMjAyMTA0MDkyMTQyNDRfMTg1ODk2MDg4N180NzUyNjAyMzA0N18xXzM=_b_B83b004b85aba8eca3ded270637616575.mp4      - https://txmov2.a.yximgs.com/upic/2021/04/09/21/BMjAyMTA0MDkyMTU4MDNfMTg1ODk2MDg4N180NzUyNzE0MzkyNV8xXzM=_b_Bf94cee6bd181efeaca64049bd2e4e276.mp4# index page dream text,# index page dream text,# 配置首页显示"梦想"的语句.dream:  enable: true  showTitle: true  title: 小二来了  text: 人生而自由，却无往不在枷锁中。#  title: 我的梦想#  text: 不是每个人都应该像我这样去建造一座水晶大教堂，但是每个人都应该拥有自己的梦想，设计自己的梦想，追求自己的梦想，实现自己的梦想。梦想是生命的灵魂，是心灵的灯塔，是引导人走向成功的信仰。有了崇高的梦想，只要矢志不渝地追求，梦想就会成为现实，奋斗就会变成壮举，生命就会创造奇迹。——罗伯·舒乐# Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: false    show: 网易云音乐  autoHide: true    # hide automaticaly  server: netease   #requiremusic platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 7503460355     #requiresong id / playlist id / album id / search keyword  fixed: true       # 开启吸底模式  autoplay: true   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.1       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  hideLrc: false     # 隐藏歌词# Whether to display the musics.# 单独的音乐页面.musics:  enable: false  title:          #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 7503460355      #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: true   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false  # 列表默认折叠  listMaxHeight: "525px" #列表最大高度# Whether to display the videos.# 是否在首页显示视频.video:  enable: false  showTitle: true  title: 精彩视频  url: # url和iframeUrl其中一个必填  iframeUrl: #在bilibili或者爱奇艺分享时选择iframe，然后填那个url来这里，sample: //player.bilibili.com/player.html?aid=669520137&amp;bvid=BV1oa4y1L7mw&amp;cid=234543483&amp;page=1  pic:  thumbnails:  height: # 如：400  autoplay: false # 是否自动播放  theme: '#42b983'  loop: false # 是否循环播放  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7# Whether to display the title of the recommended posts# 是否显示推荐文章的标题recommend:  enable: true  showTitle: true  useConfig: false # 是否使用配置文件, 在 _data/recommends.json 下配置推荐文章, false则会走主题配置的 top 属性  # useConfig 使用方式: 将主题 hexo-theme-matery/source/_data/recommends.json 移动到 my-blog/source/_data/下修改配置即可# Configure website favicon and LOGO# 配置网站favicon和网站LOGOfavicon: /favicon.pnglogo: /medias/logo.png# The configuration of the second button in the home banner,# including the display name of the button, the font awesome icon, and the hyperlink to the button.# 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.indexbtn:  enable: true  name: Github  icon: fab fa-github-alt  url: https://github.com/bestmem/bestmem.github.io# The configurations of the second line of home banner# icon/button will not show up if you leave the corresponding socialLink empty# 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  # https://github.com/blinkfox  email: # 1181062873@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: # 1181062873  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: # true # true、false# Whether to activate the Post TOC, and Configure which title types are supported by TOC support.# You can add `toc: false` to the Front-matter of a post to turn off the TOC.# 是否激活文章 TOC 功能，并配置TOC支持选中哪些标题类型，这是全局配置。# 可以在某篇文章的 Front-matter 中再加上`toc: false`，使该篇文章关闭TOC目录功能toc:  enable: true  heading: h1, h2, h3, h4  collapseDepth: 2 # 目录默认展开层级  showToggleBtn: true # 是否显示切换TOC目录展开收缩的按钮# 代码块相关code:  lang: true # 代码块是否显示名称  copy: true # 代码块是否可复制  shrink: true # 代码块是否可以收缩  break: false # 代码是否折行# 是否激活文章末尾的打赏功能，默认激活（你替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）.reward:  enable: false  title: 你的赏识是我前进的动力  wechat: /medias/reward/wechat.png  alipay: /medias/reward/alipay.jpg# Whether to activate the copyright information of the blog and author when copying the post content.# minCharNumber: Approve copyright information by copying at least how many characters.# 是否激活复制文章时追加博客和作者的版权信息.copyright:  enable: false  minCharNumber: 120 # 至少复制多少个字符就追加版权信息.  description: 本文章著作权归作者所有，任何形式的转载都请注明出处。# Whether to activate the mathjax, this is a global configuration, but the post still does not open the mathjax rendering.# Considering that the mathjax loading is time consuming,# you also need to add `mathjax: true` to the Front-matter of the post that needs to be rendered.# 是否激活mathjax数学公式，这是全局配置，但文章仍然不会都开启mathjax渲染，# 考虑到mathjax加载比较耗时，你还需要在需要渲染的文章的Front-matter中再加上`mathjax: true`才行.mathjax:  enable: false  cdn: https://cdn.bootcss.com/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML# Post word count, reading duration, site total word count.# Before you activate, please confirm that you have installed the hexo-wordcount plugin,# install the plugin command: `npm i --save hexo-wordcount`.# 文章字数统计、阅读时长、总字数统计等# 文章信息--若要开启文章字数统计，需要安装 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`postInfo:  date: true # 发布日期  update: true # 更新日期  wordCount: true # 文章字数统计  totalCount: true # 站点总文章字数  min2read: true # 文章阅读时长  readCount: true # 文章阅读次数# Whether to activate the 'love' effect of clicking on the page.# 是否激活点击页面的'爱心'效果，默认激活.clicklove:  enable: false# | 文件名             | 说明                   |# | :----------------- | :--------------------- |# | sakura-small.js    | 少量樱花               |# | sakura-half.js     | 樱花相对原效果数量减半 |# | sakura-reduce.js   | 樱花相对原效果减少1/4  |# | sakura.js          | 樱花数量不变（原效果） |# 默认事sakura.js，如需修改，请到下面地址修改# libs#   js:#     sakura: /libs/others/sakura-reduce.js# 是否激活页面樱花效果, 只在桌面版网页启用特效# 下面三种特效建议选择一种就够了，sakura:  enable: false# 是否激活页面鼠标星星跟随效果, 只在桌面版网页启用特效mouseStar:  enable: false  # 是否激活页面飘雪效果, 只在桌面版网页启用特效snowdown:  enable: false# profile in about page, including avatars, career, and personal introductions.# 在”关于”页面中配置个人信息，包括头像、职业和个人介绍.profile:  avatar: /medias/avatar.jpg  career: Software Engineer  introduction: If you wish to succeed, you should use persistence as your good friend, experience as your reference, prudence as your brother and hope as your sentry.# config my projects informations in about page.# If you don't want to display this `My Projects` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的项目"信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.myProjects:  enable: true  data:    hexo-theme-matery:      icon: fas fa-file-alt      iconBackground: 'linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)'      url: http://github.com/blinkfox/hexo-theme-matery      desc: This is a Hexo blog theme with 'Material Design' and responsive design.    Fenix:        icon: fas fa-database        iconBackground: 'linear-gradient(to bottom right, #F06292 0%, #EF5350 100%)'        url: https://github.com/blinkfox/fenix        desc: 这是 Spring Data JPA 复杂或动态 SQL 查询的扩展库。    typora-vue-theme:        icon: fas fa-file-alt        iconBackground: 'linear-gradient(to bottom right, #29B6F6 0%, #1E88E5 100%)'        url: https://github.com/blinkfox/typora-vue-theme        desc: This is a typora theme inspired by Vue document style.# config my skills informations in about page.# If you don't want to display this `My Skills` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的技能"信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.mySkills:  enable: true  data:    Java:      background: 'linear-gradient(to right, #FF0066 0%, #FF00CC 100%)'      percent: 85%    JavaScript:      background: 'linear-gradient(to right, #9900FF 0%, #CC66FF 100%)'      percent: 80%    HTML5:      background: 'linear-gradient(to right, #2196F3 0%, #42A5F5 100%)'      percent: 80%    CSS:      background: 'linear-gradient(to right, #00BCD4 0%, #80DEEA 100%)'      percent: 70%    SQL:      background: 'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'      percent: 90%    程序设计:      background: 'linear-gradient(to right, #FFEB3B 0%, #FFF176 100%)'      percent: 75%# config gallery of my photos in about page.# If you don't want to display this `Gallery` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的相册"图片，如果你不需要这些信息则可以将其设置为不激活或者将其删除.myGallery:  enable: true  data:    - /medias/featureimages/0.jpg    - /medias/featureimages/1.jpg    - /medias/featureimages/2.jpg# Whether to display post-calender in the `archive` page# 设置在归档页面中是否显示'文章日历'控件postCalendar: true# 不建议使用gittalk,gitment这样权限过高的oauth app,因为它们能够 读写 授权者 所有的公共仓库 ，也就是说拿到你的授权 Token 的人，可以将你的 GitHub 公共仓库删空（这是github权限分的不够细的锅），如果恶意攻击者想获取使用者的 AccessToken，只需要在代码中加上一个 ajax 请求即可。原贴地址:https://www.v2ex.com/t/535608。建议大家看完。（我没有在用gittalk/gitment的网站上评论过，但根据v2ex网友的提示，如果网站自行修改了 gitalk.js 脚本 或者反代了 github api，就很容易拿到你的 Token ）# https://github.com/utterance/utterances 是个 GitHub App，它的权限仅限于某个仓库。像 hugo hexo 这种静态页面类型的博客，clientID/clientSecret 泄露是不可避免的。我认为较好的解决方式是像 utteras 这种 GitHubApp，只有一个仓库的读写权限，将破坏降到最小。# valine是使用的免费的leancloud开发版资源，即使数据丢了leancloud也不用负任何的责任。此外valine的src目录已在1.4.0后停止更新。。。薛定谔的开源。# 当初多说国内最大都倒了，livere不一定靠谱。# disqus被墙了。# 畅言需要备案。# the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: false  owner:  repo:  oauth:    clientId:    clientSecret:  admin:# the Gitment config，default disabled# Gitment 评论模块的配置，默认为不激活gitment:  enable: false  owner:  repo:  oauth:    clientId:    clientSecret:# disqus config, default disabled# Disqus评论模块的配置，默认为不激活disqus:  enable: false  shortname:# Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: false  uid:# 腾讯人机验证# 注意：目前只适配和测试了valine，其它评论系统未调试验证！# 介绍: https://cloud.tencent.com/document/product/1110/36841# 管理验证码: https://console.cloud.tencent.com/captcha/graphicaltcaptcha:  enable: true  appid: xxxxxxxxxx # 你的appid# The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  appId:  # 必填  appKey: # 必填  serverURLs: # 必填 https://你的api  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder  background: /medias/comment_bg.png  coolpushkey: # The configuration of the MiniValine comment module is not activated by default.# To use it, activate the configuration item.# MiniValine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项# See: https://github.com/MiniValine/MiniValineminivaline:  enable: false  # 更多选项 https://minivaline.js.org/docs/cn/#/Options 按照yml格式继续填写即可 （除了 [el] 选项）    # emoticonUrl 等列表选项 可参考 https://github.com/MiniValine/hexo-next-minivaline  # 下面是一个例子：  serverURL: https://minivaline.your-domain.top# The configuration of the Waline comment module is not activated by default.# To use it, activate the configuration item.# Waline 评论模块的配置，默认为不激活，如要使用，就请激活该配置项# See: https://waline.js.org/waline:  enable: false  # Waline 服务端部署参考 https://waline.js.org/guide/server/intro.html 客户端和服务端版本需一致  # 下面是一个例子，请替换成自己的服务端  serverURL: https://waline.your-domain.com  avatar: 'mp' # Gravatar style : ''/mp/identicon/monsterid/wavatar/retro/hidechangyan:  enable: false  appId:  conf:# Whether to display fork me on github icon and link, default true, You can change it to your repo address# 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.githubLink:  enable: true  url: https://github.com/bestmem/bestmem.github.io.git  title: Fork Me# The configuration of the Twikoo comment module is not activated by default.# To use it, activate the configuration item and set envId.# Twikoo 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置环境 ID envId.# See: https://twikoo.js.orgtwikoo:  enable: false  envId: twikoo-1gs9l0fb17e7897a # 环境 ID，搭建教程：https://twikoo.js.org/quick-start.html  # region: ap-guangzhou # 环境地域，默认为 ap-shanghai  # path: 'window.location.pathname' # 自定义文章路径# The password verification feature of read post. To use this feature,# activate the configuration item and write the 'password' key and Cipher in the post's Front-matter.# Note: In order to ensure that the original password will not be leaked to the web page,# the password of the article must be encrypted by 'SHA256' so that it will not be cracked.# 阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的Front-matter中写上'password'的键和加密后的密文即可.# 请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过'SHA256'加密的，这样就不会被破解.verifyPassword:  enable: false  promptMessage: 请输入访问本文章的密码  errorMessage: 密码错误，将返回主页！# busuanzi(http://busuanzi.ibruce.info/) website statistics# 不蒜子(http://busuanzi.ibruce.info/) 网站统计busuanziStatistics:  enable: true  totalTraffic: true # 总访问量  totalNumberOfvisitors: true # 总人次# Add google analytics configuration# 添加 Google Analytics 配置googleAnalytics:  enable: false  id:# Add baidu analytics configuration# 添加 baidu Analytics 配置baiduAnalytics:  enable: false  id:# 百度搜索资源平台提交链接baiduPush: true# The used front-end library can be replaced with the corresponding CDN address as needed,# If the specific version is not specified below, you can use the latest version.# 使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可.# 注：jsdelivr可以自动帮你生成.min版的js和css，所以你在设置js及css路径中可以直接写.min.xxxlibs:  css:    matery: /css/matery.css    mycss: /css/my.css    gallery: /css/gallery.css    fontAwesome: /libs/awesome/css/all.min.css # V6 20220313    materialize: /libs/materialize/materialize.min.css # 1.0.0 20211109    aos: /libs/aos/aos.css    animate: /libs/animate/animate.min.css # V3.5.1    lightgallery: /libs/lightGallery/css/lightgallery.min.css # V1.10.0    aplayer: /libs/aplayer/APlayer.min.css    dplayer: /libs/dplayer/DPlayer.min.css    gitalk: /libs/gitalk/gitalk.css    jqcloud: /libs/jqcloud/jqcloud.css    tocbot: /libs/tocbot/tocbot.css    prism: /libs/prism/prism.min.css    mermaid: /libs/mermaid/mermaid.min.css    fancybox: /libs/fancybox/jquery.fancybox.css    justifiedGallery: /libs/justifiedGallery/justifiedGallery.min.css  js:    matery: /js/matery.js    jquery: /libs/jquery/jquery-3.6.0.min.js  #3.6.0 20211109    materialize: /libs/materialize/materialize.min.js # 1.0.0    masonry: /libs/masonry/masonry.pkgd.min.js # v4.0.0    aos: /libs/aos/aos.js    scrollProgress: /libs/scrollprogress/scrollProgress.min.js    lightgallery: /libs/lightGallery/js/lightgallery-all.min.js # V1.10.0    typed: /libs/typed/typed.js    clicklove: /libs/others/clicklove.js    sakura: /libs/others/sakura.js    star: /libs/others/star.js    snow: /libs/others/snow.js    tcaptcha: /libs/others/TencentCaptcha.js    busuanzi: /libs/others/busuanzi.pure.mini.js    aplayer: /libs/aplayer/APlayer.min.js    meting: /libs/aplayer/Meting.min.js    dplayer: /libs/dplayer/DPlayer.min.js    crypto: /libs/cryptojs/crypto-js.min.js    echarts: /libs/echarts/echarts.min.js    gitalk: /libs/gitalk/gitalk.min.js    valine: /libs/valine/Valine.min.js # 若想保持最新版，请替换为 https://unpkg.com/valine/dist/Valine.min.js  默认为 /libs/valine/Valine.min.js    minivaline: /libs/minivaline/MiniValine.js # latest    waline: /libs/waline/Waline.min.js # 若想保持最新版，请替换为 https://cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js 默认为(1.5.2版本) /libs/valine/Valine.min.js    twikoo: /libs/twikoo/twikoo.all.min.js # 若想保持最新版，请替换为 https://cdn.jsdelivr.net/npm/twikoo/dist/twikoo.all.min.js  默认为 /libs/twikoo/twikoo.all.min.js    jqcloud: /libs/jqcloud/jqcloud-1.0.4.min.js    tocbot: /libs/tocbot/tocbot.min.js    canvas_nest: /libs/background/canvas-nest.js    ribbon: /libs/background/ribbon.min.js    ribbonRefresh: /libs/background/ribbon-refresh.min.js    ribbon_dynamic: /libs/background/ribbon-dynamic.js    instantpage: /libs/instantpage/instantpage.js    mermaid: /libs/mermaid/mermaid.min.js    fancybox: /libs/fancybox/fancybox.js    justifiedGallery: /libs/justifiedGallery/justifiedGallery.min.js    prism: /libs/prism/prism.min.js    codeblock: /libs/codeBlock/codeBlockFuction.js    codelang: /libs/codeBlock/codeLang.js    codecopy: /libs/codeBlock/codeCopy.js    codeshrink: /libs/codeBlock/codeShrink.js# The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages:- /medias/featureimages/0.jpg- /medias/featureimages/1.jpg- /medias/featureimages/2.jpg- /medias/featureimages/3.jpg- /medias/featureimages/4.jpg- /medias/featureimages/5.jpg- /medias/featureimages/6.jpg- /medias/featureimages/7.jpg- /medias/featureimages/8.jpg- /medias/featureimages/9.jpg- /medias/featureimages/10.jpg- /medias/featureimages/11.jpg- /medias/featureimages/12.jpg- /medias/featureimages/13.jpg- /medias/featureimages/14.jpg- /medias/featureimages/15.jpg- /medias/featureimages/16.jpg- /medias/featureimages/17.jpg- /medias/featureimages/18.jpg- /medias/featureimages/19.jpg- /medias/featureimages/20.jpg- /medias/featureimages/21.jpg- /medias/featureimages/22.jpg- /medias/featureimages/23.jpg# default configs that the default policy for every articles/posts# default 配置文章的默认转载规则# you can define reprint policy for a single article in the front-matter of the specific md file using this key: reprintPolicy# 您可以使用在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则# 可用的转载规则有（available reprint policies are）：# 这些转载规则的意义请参考(you can refer to this link FMI)：https://creativecommons.org/choose/?lang=zh# cc_by（知识共享署名 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）# cc_by_nd（知识共享署名-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）# cc_by_sa（知识共享署名-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-ShareAlike 4.0 International License）# cc_by_nc（知识共享署名-非商业性使用 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）# cc_by_nc_nd（知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License）# cc_by_nc_sa（知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License）# cc0（CC0 1.0 通用 (CC0 1.0) 公共领域贡献 CC0 1.0 Universal (CC0 1.0) Public Domain Dedication） https://creativecommons.org/publicdomain/zero/1.0/deed.zh# noreprint（不允许转载 not allowed to reprint）# pay（付费转载 pay for reprinting）reprint:  enable: true # whether enable reprint section 是否启用“转载规则限定模块”  default: cc_by# DaoVoice online contactdaovoice:  enable: false  app_id:# Tidio online contacttidio:  enable: false  public_key:# 腾讯兔小巢，见https://txc.qq.com/tuxiaochao:  enable: false  productId:#背景canvas-nestcanvas_nest:  enable: true  color: 0,0,255 # 线条颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割  pointColor: 0,0,255 # 交点颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割  opacity: 0.7 # 线条透明度（0~1）, 默认: 0.5  zIndex: -1 # 背景的 z-index 属性，css 属性用于控制所在层的位置, 默认: -1.  count: 99 # 线条的总数量, 默认: 99# 背景静止彩带.ribbon:  enable: true  size: 150 # 彩带大小, 默认: 90.  alpha: 0.6 # 彩带透明度 (0 ~ 1), 默认: 0.6.  zIndex: -1 # 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1.  clickChange: false  # 设置是否每次点击都更换彩带.# 背景动态彩带.ribbon_dynamic:  enable: true# sharejs文章分享模块.# 支持顺序，可选项目为twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin.# https://bestmem.github.io地址扫描后手机打不开sharejs:  enable: false  sites: wechat,qq# addthis文章分享模块.addthis:  enable: false  pubid:  # 前往https://www.addthis.com/获取# 打字效果副标题.# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: false # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 80 # 打字速度  backSpeed: 40 # 删除速度  sub:    - 知识有两种，一种是你知道的，一种是你知道在哪里能找到的    - There are two kinds of knowledge, one you know, and one you know where to find it    - 从来没有真正的绝境, 只有心灵的迷途    - Never really desperate, only the lost of the soul# 手机二级菜单.navMenu:  mleft: false # 二级侧栏子菜单是否对齐左边  bgColor: " " # 二级侧栏子菜单背景颜色,留空即为全局背景色# 网页预加载.instantpage:  enable: true# banner 是否每日切换.# 若为 false, 则 banner 默认为 /medias/banner/0.jpgbanner:  enable: true#ICP备案信息尾部显示icp:  enable: false  url: # 备案链接  text: # 备案信息# CDN访问加速 # 第一次使用本功能，一定要先配置url，再`hexo cl &amp;&amp; hexo g &amp;&amp; hexo d`部署到GitHub的仓库，注意！必须是GitHub的仓库！# 如果必须要使用国内的coding或者gitee，可以采用双部署，同时将网站部署到两个仓库（其中一个必须是GitHub的仓库）# URL配置规则（例子如下）： https://cdn.jsdelivr.net/gh/你的GitHub用户名/你的仓库名# 如果想关闭此功能，将 url地址 注释或删除即可！## 注：配置了此项，就代表着本地调试的时候，网站依然会去GitHub请求资源（原来的资源），本地调试的时候记得将 此项配置 注释或者删除掉# 更多关于访问速度优化，请查看：https://blog.sky03.cn/posts/42790.html# 注：jsdelivr可以自动帮你生成.min版的js和css，所以你在上面设置js及css路径中可以直接写.min.xxxjsDelivr:  url: # https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io  # 网站背景图background:  enable: true  #url: "https://cdn.jsdelivr.net/gh/Tokisaki-Galaxy/res/site/medias/background.jpg"  url: "https://cdn.hk01.com/di/media/images/dw/20200921/384697236124209152.jpeg/t2I1OxA0i0hRyF28TQrl1bi2xTRkVkC11-CCodfggqE?v=w1920"# 说说 https://artitalk.js.org/artitalk:  enable: false  appId: # xxxxx  appKey: # xxxxxx# 哔哔功能配置# 登陆leancloud创建应用。进入应用后，点击创建 Class，将「 Class 名称」命名为 content# 点击刚刚创建的content Class，点击添加列并创建名称为content的列，类型为String，注意列注释也要填写（随意填）# 记录appid，masterkey，api域名# 输入:hexo new page bb# hexo就在source文件夹下创建了bb/index.md。# 修改index.md的frontmater下的layout为bb：# ---# title: 黑石说# layout: bb# ---# 里面的文字可以自己随意加，会显示在哔哔的上方。# 关注公众号 "黑石哔哔"，发送: //bindCurrentUser:你的APPID,你的MASTERKEY,你的RESTAPI# 可用leancloud国际版，国际版api为 https://appid前八位.api.lncldglobal.combbtime:  enable: false  appId: # 你的appId  appKey: # 你的appKey  serverURLs: # https://你的api# 图表绘制插件# 建议更换更换hexo-renderer-markdown-it引擎。参考下面链接# https://github.com/hexojs/hexo-renderer-markdown-it# https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Advanced-Configuration# 使用教程： https://blog.17lai.site/posts/cf0f47fd/#Mermaid# 安装配置方法# yarn remove hexo-renderer-marked# yarn add hexo-renderer-markdown-it hexo-tag-mermaid# 注意：hexo-renderer-markdown-it 比默认引擎更快，可选择插件较多，请认真看上面两个链接教程。# mermaid语法教程 https://mermaid-js.github.io/mermaid/#/# 使用方法：# 在post文章中填写mermaid语句，需要使用{% mermaid %} 包裹# {% mermaid %}# [mermaid 语句正文]# {% endmermaid %}# 样例如下所示：# {% mermaid %}# graph TD#     A[Christmas] --&gt;|Get money| B(Go shopping)#     B --&gt; C{Let me think}#     C --&gt;|One| D[Laptop]#     C --&gt;|Two| E[iPhone]#     C --&gt;|Three| F[Car]# {% endmermaid %}# mermaid chart。 依赖hexo-tag-mermaidmermaid: ## mermaid url https://github.com/knsv/mermaid  enable: false  # default false  version: "latest" # default v7.1.2  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js    #startOnload: true  // default true# 新增搜索search:  path: search.xml  field: post# 中文链接转拼音，利于SEOpermalink_pinyin:  enable: true  separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>音乐播放问题：测试发现默认的：“我喜欢的音乐“这个歌单的ID是没法播放，得是你自己创建的歌单。你可以创建个bestmem.github.io这样的歌单专门放音乐。</p></blockquote></li></ol><h1 id="hexo的快速使用"><a href="#hexo的快速使用" class="headerlink" title="hexo的快速使用"></a>hexo的快速使用</h1><p>创建一个新帖子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"hexo+github搭建博客系统"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地运行服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署静态文件到远程github站点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考链接：</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p><a href="https://docs.github.com/cn/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax">https://docs.github.com/cn/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax</a></p><p><a href="https://pages.github.com/">https://pages.github.com/</a></p><p><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
